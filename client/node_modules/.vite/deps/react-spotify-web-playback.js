import {
  require_jsx_runtime
} from "./chunk-GC435Q6Y.js";
import {
  require_react
} from "./chunk-UTK47NYQ.js";
import {
  __commonJS,
  __toESM
} from "./chunk-DFKQJ226.js";

// node_modules/nano-css/index.js
var require_nano_css = __commonJS({
  "node_modules/nano-css/index.js"(exports) {
    "use strict";
    var KEBAB_REGEX = /[A-Z]/g;
    var hash = function(str) {
      var h = 5381, i = str.length;
      while (i)
        h = h * 33 ^ str.charCodeAt(--i);
      return "_" + (h >>> 0).toString(36);
    };
    exports.create = function(config) {
      config = config || {};
      var assign = config.assign || Object.assign;
      var client = typeof window === "object";
      if (true) {
        if (client) {
          if (typeof document !== "object" || !document.getElementsByTagName("HTML")) {
            console.error(
              'nano-css detected browser environment because of "window" global, but "document" global seems to be defective.'
            );
          }
        }
      }
      var renderer = assign({
        raw: "",
        pfx: "_",
        client,
        assign,
        stringify: JSON.stringify,
        kebab: function(prop) {
          return prop.replace(KEBAB_REGEX, "-$&").toLowerCase();
        },
        decl: function(key, value) {
          key = renderer.kebab(key);
          return key + ":" + value + ";";
        },
        hash: function(obj) {
          return hash(renderer.stringify(obj));
        },
        selector: function(parent, selector) {
          return parent + (selector[0] === ":" ? "" : " ") + selector;
        },
        putRaw: function(rawCssRule) {
          renderer.raw += rawCssRule;
        }
      }, config);
      if (renderer.client) {
        if (!renderer.sh)
          document.head.appendChild(renderer.sh = document.createElement("style"));
        if (true) {
          renderer.sh.setAttribute("data-nano-css-dev", "");
          renderer.shTest = document.createElement("style");
          renderer.shTest.setAttribute("data-nano-css-dev-tests", "");
          document.head.appendChild(renderer.shTest);
        }
        renderer.putRaw = function(rawCssRule) {
          if (false) {
            var sheet = renderer.sh.sheet;
            try {
              sheet.insertRule(rawCssRule, sheet.cssRules.length);
            } catch (error) {
            }
          } else {
            try {
              renderer.shTest.sheet.insertRule(rawCssRule, renderer.shTest.sheet.cssRules.length);
            } catch (error) {
              if (config.verbose) {
                console.error(error);
              }
            }
            renderer.sh.appendChild(document.createTextNode(rawCssRule));
          }
        };
      }
      renderer.put = function(selector, decls, atrule) {
        var str = "";
        var prop, value;
        var postponed = [];
        for (prop in decls) {
          value = decls[prop];
          if (value instanceof Object && !(value instanceof Array)) {
            postponed.push(prop);
          } else {
            if (!renderer.sourcemaps) {
              str += "    " + renderer.decl(prop, value, selector, atrule) + "\n";
            } else {
              str += renderer.decl(prop, value, selector, atrule);
            }
          }
        }
        if (str) {
          if (!renderer.sourcemaps) {
            str = "\n" + selector + " {\n" + str + "}\n";
          } else {
            str = selector + "{" + str + "}";
          }
          renderer.putRaw(atrule ? atrule + "{" + str + "}" : str);
        }
        for (var i = 0; i < postponed.length; i++) {
          prop = postponed[i];
          if (prop[0] === "@" && prop !== "@font-face") {
            renderer.putAt(selector, decls[prop], prop);
          } else {
            renderer.put(renderer.selector(selector, prop), decls[prop], atrule);
          }
        }
      };
      renderer.putAt = renderer.put;
      return renderer;
    };
  }
});

// node_modules/nano-css/addon/cache.js
var require_cache = __commonJS({
  "node_modules/nano-css/addon/cache.js"(exports) {
    "use strict";
    exports.addon = function(renderer) {
      var cache = {};
      renderer.cache = function(css) {
        if (!css)
          return "";
        var key = renderer.hash(css);
        if (!cache[key]) {
          cache[key] = renderer.rule(css, key);
        }
        return cache[key];
      };
    };
  }
});

// node_modules/nano-css/addon/__dev__/warnOnMissingDependencies.js
var require_warnOnMissingDependencies = __commonJS({
  "node_modules/nano-css/addon/__dev__/warnOnMissingDependencies.js"(exports, module) {
    "use strict";
    var pkgName = "nano-css";
    module.exports = function warnOnMissingDependencies(addon, renderer, deps) {
      var missing = [];
      for (var i = 0; i < deps.length; i++) {
        var name = deps[i];
        if (!renderer[name]) {
          missing.push(name);
        }
      }
      if (missing.length) {
        var str = 'Addon "' + addon + '" is missing the following dependencies:';
        for (var j = 0; j < missing.length; j++) {
          str += '\n require("' + pkgName + "/addon/" + missing[j] + '").addon(nano);';
        }
        throw new Error(str);
      }
    };
  }
});

// node_modules/nano-css/addon/jsx.js
var require_jsx = __commonJS({
  "node_modules/nano-css/addon/jsx.js"(exports) {
    "use strict";
    var addonCache = require_cache().addon;
    exports.addon = function(renderer) {
      if (!renderer.cache) {
        addonCache(renderer);
      }
      if (true) {
        require_warnOnMissingDependencies()("jsx", renderer, ["rule", "cache"]);
      }
      renderer.jsx = function(fn, styles, block) {
        var className;
        var isElement = typeof fn === "string";
        if (true) {
          className = renderer.rule(styles, block);
        }
        var Component2 = function(props) {
          if (!className) {
            className = renderer.rule(styles, block);
          }
          var copy = props;
          var $as = copy.$as;
          var $ref = copy.$ref;
          if (true) {
            copy = renderer.assign({}, props);
          }
          var dynamicClassName = renderer.cache(props.css);
          delete copy.css;
          delete copy.$as;
          if (isElement || $as) {
            delete copy.$ref;
            copy.ref = $ref;
          }
          copy.className = (props.className || "") + className + dynamicClassName;
          return isElement || $as ? renderer.h($as || fn, copy) : fn(copy);
        };
        if (true) {
          if (block) {
            Component2.displayName = "jsx(" + block + ")";
          }
        }
        return Component2;
      };
    };
  }
});

// node_modules/nano-css/addon/keyframes.js
var require_keyframes = __commonJS({
  "node_modules/nano-css/addon/keyframes.js"(exports) {
    "use strict";
    exports.addon = function(renderer, config) {
      if (true) {
        require_warnOnMissingDependencies()("keyframes", renderer, ["putRaw", "put"]);
      }
      config = renderer.assign({
        prefixes: ["-webkit-", "-moz-", "-o-", ""]
      }, config || {});
      var prefixes = config.prefixes;
      if (renderer.client) {
        document.head.appendChild(renderer.ksh = document.createElement("style"));
      }
      var putAt = renderer.putAt;
      renderer.putAt = function(__, keyframes2, prelude) {
        if (prelude[1] === "k") {
          var str = "";
          for (var keyframe in keyframes2) {
            var decls = keyframes2[keyframe];
            var strDecls = "";
            for (var prop in decls)
              strDecls += renderer.decl(prop, decls[prop]);
            str += keyframe + "{" + strDecls + "}";
          }
          for (var i = 0; i < prefixes.length; i++) {
            var prefix = prefixes[i];
            var rawKeyframes = prelude.replace("@keyframes", "@" + prefix + "keyframes") + "{" + str + "}";
            if (renderer.client) {
              renderer.ksh.appendChild(document.createTextNode(rawKeyframes));
            } else {
              renderer.putRaw(rawKeyframes);
            }
          }
          return;
        }
        putAt(__, keyframes2, prelude);
      };
      renderer.keyframes = function(keyframes2, block) {
        if (!block)
          block = renderer.hash(keyframes2);
        block = renderer.pfx + block;
        renderer.putAt("", keyframes2, "@keyframes " + block);
        return block;
      };
    };
  }
});

// node_modules/nano-css/addon/nesting.js
var require_nesting = __commonJS({
  "node_modules/nano-css/addon/nesting.js"(exports) {
    "use strict";
    exports.addon = function(renderer) {
      renderer.selector = function(parentSelectors, selector) {
        var parents = parentSelectors.split(",");
        var result = [];
        var selectors = selector.split(",");
        var len1 = parents.length;
        var len2 = selectors.length;
        var i, j, sel, pos, parent, replacedSelector;
        for (i = 0; i < len2; i++) {
          sel = selectors[i];
          pos = sel.indexOf("&");
          if (pos > -1) {
            for (j = 0; j < len1; j++) {
              parent = parents[j];
              replacedSelector = sel.replace(/&/g, parent);
              result.push(replacedSelector);
            }
          } else {
            for (j = 0; j < len1; j++) {
              parent = parents[j];
              if (parent) {
                result.push(parent + " " + sel);
              } else {
                result.push(sel);
              }
            }
          }
        }
        return result.join(",");
      };
    };
  }
});

// node_modules/nano-css/addon/rule.js
var require_rule = __commonJS({
  "node_modules/nano-css/addon/rule.js"(exports) {
    "use strict";
    exports.addon = function(renderer) {
      if (true) {
        require_warnOnMissingDependencies()("rule", renderer, ["put"]);
      }
      var blocks;
      if (true) {
        blocks = {};
      }
      renderer.rule = function(css, block) {
        if (true) {
          if (block) {
            if (typeof block !== "string") {
              throw new TypeError(
                'nano-css block name must be a string. For example, use nano.rule({color: "red", "RedText").'
              );
            }
            if (blocks[block]) {
              console.error('Block name "' + block + '" used more than once.');
            }
            blocks[block] = 1;
          }
        }
        block = block || renderer.hash(css);
        block = renderer.pfx + block;
        renderer.put("." + block, css);
        return " " + block;
      };
    };
  }
});

// node_modules/nano-css/addon/style.js
var require_style = __commonJS({
  "node_modules/nano-css/addon/style.js"(exports) {
    "use strict";
    exports.addon = function(renderer) {
      if (true) {
        require_warnOnMissingDependencies()("style", renderer, ["jsx"]);
      }
      renderer.style = function(fn, styles, dynamicTemplate, block) {
        var jsxComponent = renderer.jsx(fn, styles, block);
        var Component2 = function(props) {
          var copy = props;
          if (true) {
            copy = Object.assign({}, props);
          }
          if (dynamicTemplate) {
            copy.css = dynamicTemplate(props);
          }
          return jsxComponent(copy);
        };
        if (true) {
          if (block || typeof fn === "function") {
            Component2.displayName = "style(" + (block || fn.displayName || fn.name) + ")";
          }
        }
        return Component2;
      };
    };
  }
});

// node_modules/nano-css/addon/styled.js
var require_styled = __commonJS({
  "node_modules/nano-css/addon/styled.js"(exports) {
    "use strict";
    var tags = [
      "a",
      "abbr",
      "address",
      "area",
      "article",
      "aside",
      "audio",
      "b",
      "base",
      "bdi",
      "bdo",
      "big",
      "blockquote",
      "body",
      "br",
      "button",
      "canvas",
      "caption",
      "cite",
      "code",
      "col",
      "colgroup",
      "data",
      "datalist",
      "dd",
      "del",
      "details",
      "dfn",
      "dialog",
      "div",
      "dl",
      "dt",
      "em",
      "embed",
      "fieldset",
      "figcaption",
      "figure",
      "footer",
      "form",
      "h1",
      "h2",
      "h3",
      "h4",
      "h5",
      "h6",
      "head",
      "header",
      "hgroup",
      "hr",
      "html",
      "i",
      "iframe",
      "img",
      "input",
      "ins",
      "kbd",
      "keygen",
      "label",
      "legend",
      "li",
      "link",
      "main",
      "map",
      "mark",
      "marquee",
      "menu",
      "menuitem",
      "meta",
      "meter",
      "nav",
      "noscript",
      "object",
      "ol",
      "optgroup",
      "option",
      "output",
      "p",
      "param",
      "picture",
      "pre",
      "progress",
      "q",
      "rp",
      "rt",
      "ruby",
      "s",
      "samp",
      "script",
      "section",
      "select",
      "small",
      "source",
      "span",
      "strong",
      "style",
      "sub",
      "summary",
      "sup",
      "table",
      "tbody",
      "td",
      "textarea",
      "tfoot",
      "th",
      "thead",
      "time",
      "title",
      "tr",
      "track",
      "u",
      "ul",
      "var",
      "video",
      "wbr",
      // SVG
      "circle",
      "clipPath",
      "defs",
      "ellipse",
      "foreignObject",
      "g",
      "image",
      "line",
      "linearGradient",
      "mask",
      "path",
      "pattern",
      "polygon",
      "polyline",
      "radialGradient",
      "rect",
      "stop",
      "svg",
      "text",
      "tspan"
    ];
    exports.addon = function(renderer) {
      if (true) {
        require_warnOnMissingDependencies()("styled", renderer, ["style"]);
      }
      var styled2 = function(tag2) {
        return function(styles, dynamicTemplate, block) {
          return renderer.style(tag2, styles, dynamicTemplate, block);
        };
      };
      var tag;
      for (var i = 0; i < tags.length; i++) {
        tag = tags[i];
        styled2[tag] = styled2(tag);
      }
      renderer.styled = styled2;
    };
  }
});

// node_modules/fast-deep-equal/react.js
var require_react2 = __commonJS({
  "node_modules/fast-deep-equal/react.js"(exports, module) {
    "use strict";
    module.exports = function equal2(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal2(a[i], b[i]))
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf)
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString)
          return a.toString() === b.toString();
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys[i]))
            return false;
        for (i = length; i-- !== 0; ) {
          var key = keys[i];
          if (key === "_owner" && a.$$typeof) {
            continue;
          }
          if (!equal2(a[key], b[key]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    };
  }
});

// node_modules/js-cookie/src/js.cookie.js
var require_js_cookie = __commonJS({
  "node_modules/js-cookie/src/js.cookie.js"(exports, module) {
    (function(factory) {
      var registeredInModuleLoader;
      if (typeof define === "function" && define.amd) {
        define(factory);
        registeredInModuleLoader = true;
      }
      if (typeof exports === "object") {
        module.exports = factory();
        registeredInModuleLoader = true;
      }
      if (!registeredInModuleLoader) {
        var OldCookies = window.Cookies;
        var api = window.Cookies = factory();
        api.noConflict = function() {
          window.Cookies = OldCookies;
          return api;
        };
      }
    })(function() {
      function extend() {
        var i = 0;
        var result = {};
        for (; i < arguments.length; i++) {
          var attributes = arguments[i];
          for (var key in attributes) {
            result[key] = attributes[key];
          }
        }
        return result;
      }
      function decode(s) {
        return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
      }
      function init(converter) {
        function api() {
        }
        function set(key, value, attributes) {
          if (typeof document === "undefined") {
            return;
          }
          attributes = extend({
            path: "/"
          }, api.defaults, attributes);
          if (typeof attributes.expires === "number") {
            attributes.expires = new Date(new Date() * 1 + attributes.expires * 864e5);
          }
          attributes.expires = attributes.expires ? attributes.expires.toUTCString() : "";
          try {
            var result = JSON.stringify(value);
            if (/^[\{\[]/.test(result)) {
              value = result;
            }
          } catch (e2) {
          }
          value = converter.write ? converter.write(value, key) : encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
          key = encodeURIComponent(String(key)).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent).replace(/[\(\)]/g, escape);
          var stringifiedAttributes = "";
          for (var attributeName in attributes) {
            if (!attributes[attributeName]) {
              continue;
            }
            stringifiedAttributes += "; " + attributeName;
            if (attributes[attributeName] === true) {
              continue;
            }
            stringifiedAttributes += "=" + attributes[attributeName].split(";")[0];
          }
          return document.cookie = key + "=" + value + stringifiedAttributes;
        }
        function get(key, json) {
          if (typeof document === "undefined") {
            return;
          }
          var jar = {};
          var cookies = document.cookie ? document.cookie.split("; ") : [];
          var i = 0;
          for (; i < cookies.length; i++) {
            var parts = cookies[i].split("=");
            var cookie = parts.slice(1).join("=");
            if (!json && cookie.charAt(0) === '"') {
              cookie = cookie.slice(1, -1);
            }
            try {
              var name = decode(parts[0]);
              cookie = (converter.read || converter)(cookie, name) || decode(cookie);
              if (json) {
                try {
                  cookie = JSON.parse(cookie);
                } catch (e2) {
                }
              }
              jar[name] = cookie;
              if (key === name) {
                break;
              }
            } catch (e2) {
            }
          }
          return key ? jar[key] : jar;
        }
        api.set = set;
        api.get = function(key) {
          return get(
            key,
            false
            /* read as raw */
          );
        };
        api.getJSON = function(key) {
          return get(
            key,
            true
            /* read as json */
          );
        };
        api.remove = function(key, attributes) {
          set(key, "", extend(attributes, {
            expires: -1
          }));
        };
        api.defaults = {};
        api.withConverter = init;
        return api;
      }
      return init(function() {
      });
    });
  }
});

// node_modules/toggle-selection/index.js
var require_toggle_selection = __commonJS({
  "node_modules/toggle-selection/index.js"(exports, module) {
    module.exports = function() {
      var selection = document.getSelection();
      if (!selection.rangeCount) {
        return function() {
        };
      }
      var active = document.activeElement;
      var ranges = [];
      for (var i = 0; i < selection.rangeCount; i++) {
        ranges.push(selection.getRangeAt(i));
      }
      switch (active.tagName.toUpperCase()) {
        case "INPUT":
        case "TEXTAREA":
          active.blur();
          break;
        default:
          active = null;
          break;
      }
      selection.removeAllRanges();
      return function() {
        selection.type === "Caret" && selection.removeAllRanges();
        if (!selection.rangeCount) {
          ranges.forEach(function(range) {
            selection.addRange(range);
          });
        }
        active && active.focus();
      };
    };
  }
});

// node_modules/copy-to-clipboard/index.js
var require_copy_to_clipboard = __commonJS({
  "node_modules/copy-to-clipboard/index.js"(exports, module) {
    "use strict";
    var deselectCurrent = require_toggle_selection();
    var clipboardToIE11Formatting = {
      "text/plain": "Text",
      "text/html": "Url",
      "default": "Text"
    };
    var defaultMessage = "Copy to clipboard: #{key}, Enter";
    function format(message) {
      var copyKey = (/mac os x/i.test(navigator.userAgent) ? "⌘" : "Ctrl") + "+C";
      return message.replace(/#{\s*key\s*}/g, copyKey);
    }
    function copy(text, options) {
      var debug, message, reselectPrevious, range, selection, mark, success = false;
      if (!options) {
        options = {};
      }
      debug = options.debug || false;
      try {
        reselectPrevious = deselectCurrent();
        range = document.createRange();
        selection = document.getSelection();
        mark = document.createElement("span");
        mark.textContent = text;
        mark.ariaHidden = "true";
        mark.style.all = "unset";
        mark.style.position = "fixed";
        mark.style.top = 0;
        mark.style.clip = "rect(0, 0, 0, 0)";
        mark.style.whiteSpace = "pre";
        mark.style.webkitUserSelect = "text";
        mark.style.MozUserSelect = "text";
        mark.style.msUserSelect = "text";
        mark.style.userSelect = "text";
        mark.addEventListener("copy", function(e2) {
          e2.stopPropagation();
          if (options.format) {
            e2.preventDefault();
            if (typeof e2.clipboardData === "undefined") {
              debug && console.warn("unable to use e.clipboardData");
              debug && console.warn("trying IE specific stuff");
              window.clipboardData.clearData();
              var format2 = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting["default"];
              window.clipboardData.setData(format2, text);
            } else {
              e2.clipboardData.clearData();
              e2.clipboardData.setData(options.format, text);
            }
          }
          if (options.onCopy) {
            e2.preventDefault();
            options.onCopy(e2.clipboardData);
          }
        });
        document.body.appendChild(mark);
        range.selectNodeContents(mark);
        selection.addRange(range);
        var successful = document.execCommand("copy");
        if (!successful) {
          throw new Error("copy command was unsuccessful");
        }
        success = true;
      } catch (err) {
        debug && console.error("unable to copy using execCommand: ", err);
        debug && console.warn("trying IE specific stuff");
        try {
          window.clipboardData.setData(options.format || "text", text);
          options.onCopy && options.onCopy(window.clipboardData);
          success = true;
        } catch (err2) {
          debug && console.error("unable to copy using clipboardData: ", err2);
          debug && console.error("falling back to prompt");
          message = format("message" in options ? options.message : defaultMessage);
          window.prompt(message, text);
        }
      } finally {
        if (selection) {
          if (typeof selection.removeRange == "function") {
            selection.removeRange(range);
          } else {
            selection.removeAllRanges();
          }
        }
        if (mark) {
          document.body.removeChild(mark);
        }
        reselectPrevious();
      }
      return success;
    }
    module.exports = copy;
  }
});

// node_modules/nano-css/addon/cssom.js
var require_cssom = __commonJS({
  "node_modules/nano-css/addon/cssom.js"(exports) {
    "use strict";
    exports.addon = function(renderer) {
      if (!renderer.client)
        return;
      if (true) {
        require_warnOnMissingDependencies()("cssom", renderer, ["sh"]);
      }
      document.head.appendChild(renderer.msh = document.createElement("style"));
      renderer.createRule = function(selector, prelude) {
        var rawCss = selector + "{}";
        if (prelude)
          rawCss = prelude + "{" + rawCss + "}";
        var sheet = prelude ? renderer.msh.sheet : renderer.sh.sheet;
        var index = sheet.insertRule(rawCss, sheet.cssRules.length);
        var rule = (sheet.cssRules || sheet.rules)[index];
        rule.index = index;
        if (prelude) {
          var selectorRule = (rule.cssRules || rule.rules)[0];
          rule.style = selectorRule.style;
          rule.styleMap = selectorRule.styleMap;
        }
        return rule;
      };
    };
  }
});

// node_modules/nano-css/addon/vcssom/removeRule.js
var require_removeRule = __commonJS({
  "node_modules/nano-css/addon/vcssom/removeRule.js"(exports) {
    function removeRule(rule) {
      var maxIndex = rule.index;
      var sh = rule.parentStyleSheet;
      var rules = sh.cssRules || sh.rules;
      maxIndex = Math.max(maxIndex, rules.length - 1);
      while (maxIndex >= 0) {
        if (rules[maxIndex] === rule) {
          sh.deleteRule(maxIndex);
          break;
        }
        maxIndex--;
      }
    }
    exports.removeRule = removeRule;
  }
});

// node_modules/nano-css/addon/vcssom.js
var require_vcssom = __commonJS({
  "node_modules/nano-css/addon/vcssom.js"(exports) {
    "use strict";
    var removeRule = require_removeRule().removeRule;
    exports.addon = function(renderer) {
      if (!renderer.client)
        return;
      if (true) {
        require_warnOnMissingDependencies()("cssom", renderer, ["createRule"]);
      }
      var kebab = renderer.kebab;
      function VRule(selector, prelude) {
        this.rule = renderer.createRule(selector, prelude);
        this.decl = {};
      }
      VRule.prototype.diff = function(newDecl) {
        var oldDecl = this.decl;
        var style = this.rule.style;
        var property;
        for (property in oldDecl)
          if (newDecl[property] === void 0)
            style.removeProperty(property);
        for (property in newDecl)
          if (newDecl[property] !== oldDecl[property])
            style.setProperty(kebab(property), newDecl[property]);
        this.decl = newDecl;
      };
      VRule.prototype.del = function() {
        removeRule(this.rule);
      };
      function VSheet() {
        this.tree = {};
      }
      VSheet.prototype.diff = function(newTree) {
        var oldTree = this.tree;
        for (var prelude in oldTree) {
          if (newTree[prelude] === void 0) {
            var rules = oldTree[prelude];
            for (var selector in rules)
              rules[selector].del();
          }
        }
        for (var prelude in newTree) {
          if (oldTree[prelude] === void 0) {
            for (var selector in newTree[prelude]) {
              var rule = new VRule(selector, prelude);
              rule.diff(newTree[prelude][selector]);
              newTree[prelude][selector] = rule;
            }
          } else {
            var oldRules = oldTree[prelude];
            var newRules = newTree[prelude];
            for (var selector in oldRules)
              if (!newRules[selector])
                oldRules[selector].del();
            for (var selector in newRules) {
              var rule = oldRules[selector];
              if (rule) {
                rule.diff(newRules[selector]);
                newRules[selector] = rule;
              } else {
                rule = new VRule(selector, prelude);
                rule.diff(newRules[selector]);
                newRules[selector] = rule;
              }
            }
          }
        }
        this.tree = newTree;
      };
      renderer.VRule = VRule;
      renderer.VSheet = VSheet;
    };
  }
});

// node_modules/nano-css/addon/vcssom/cssToTree.js
var require_cssToTree = __commonJS({
  "node_modules/nano-css/addon/vcssom/cssToTree.js"(exports) {
    function cssToTree2(tree, css, selector, prelude) {
      var declarations = {};
      var hasDeclarations = false;
      var key, value;
      for (key in css) {
        value = css[key];
        if (typeof value !== "object") {
          hasDeclarations = true;
          declarations[key] = value;
        }
      }
      if (hasDeclarations) {
        if (!tree[prelude])
          tree[prelude] = {};
        tree[prelude][selector] = declarations;
      }
      for (key in css) {
        value = css[key];
        if (typeof value === "object") {
          if (key[0] === "@") {
            cssToTree2(tree, value, selector, key);
          } else {
            var hasCurrentSymbol = key.indexOf("&") > -1;
            var selectorParts = selector.split(",");
            if (hasCurrentSymbol) {
              for (var i = 0; i < selectorParts.length; i++) {
                selectorParts[i] = key.replace(/&/g, selectorParts[i]);
              }
            } else {
              for (var i = 0; i < selectorParts.length; i++) {
                selectorParts[i] = selectorParts[i] + " " + key;
              }
            }
            cssToTree2(tree, value, selectorParts.join(","), prelude);
          }
        }
      }
    }
    exports.cssToTree = cssToTree2;
  }
});

// node_modules/screenfull/dist/screenfull.js
var require_screenfull = __commonJS({
  "node_modules/screenfull/dist/screenfull.js"(exports, module) {
    (function() {
      "use strict";
      var document2 = typeof window !== "undefined" && typeof window.document !== "undefined" ? window.document : {};
      var isCommonjs = typeof module !== "undefined" && module.exports;
      var fn = function() {
        var val;
        var fnMap = [
          [
            "requestFullscreen",
            "exitFullscreen",
            "fullscreenElement",
            "fullscreenEnabled",
            "fullscreenchange",
            "fullscreenerror"
          ],
          // New WebKit
          [
            "webkitRequestFullscreen",
            "webkitExitFullscreen",
            "webkitFullscreenElement",
            "webkitFullscreenEnabled",
            "webkitfullscreenchange",
            "webkitfullscreenerror"
          ],
          // Old WebKit
          [
            "webkitRequestFullScreen",
            "webkitCancelFullScreen",
            "webkitCurrentFullScreenElement",
            "webkitCancelFullScreen",
            "webkitfullscreenchange",
            "webkitfullscreenerror"
          ],
          [
            "mozRequestFullScreen",
            "mozCancelFullScreen",
            "mozFullScreenElement",
            "mozFullScreenEnabled",
            "mozfullscreenchange",
            "mozfullscreenerror"
          ],
          [
            "msRequestFullscreen",
            "msExitFullscreen",
            "msFullscreenElement",
            "msFullscreenEnabled",
            "MSFullscreenChange",
            "MSFullscreenError"
          ]
        ];
        var i = 0;
        var l = fnMap.length;
        var ret = {};
        for (; i < l; i++) {
          val = fnMap[i];
          if (val && val[1] in document2) {
            for (i = 0; i < val.length; i++) {
              ret[fnMap[0][i]] = val[i];
            }
            return ret;
          }
        }
        return false;
      }();
      var eventNameMap = {
        change: fn.fullscreenchange,
        error: fn.fullscreenerror
      };
      var screenfull2 = {
        request: function(element, options) {
          return new Promise(function(resolve, reject) {
            var onFullScreenEntered = function() {
              this.off("change", onFullScreenEntered);
              resolve();
            }.bind(this);
            this.on("change", onFullScreenEntered);
            element = element || document2.documentElement;
            var returnPromise = element[fn.requestFullscreen](options);
            if (returnPromise instanceof Promise) {
              returnPromise.then(onFullScreenEntered).catch(reject);
            }
          }.bind(this));
        },
        exit: function() {
          return new Promise(function(resolve, reject) {
            if (!this.isFullscreen) {
              resolve();
              return;
            }
            var onFullScreenExit = function() {
              this.off("change", onFullScreenExit);
              resolve();
            }.bind(this);
            this.on("change", onFullScreenExit);
            var returnPromise = document2[fn.exitFullscreen]();
            if (returnPromise instanceof Promise) {
              returnPromise.then(onFullScreenExit).catch(reject);
            }
          }.bind(this));
        },
        toggle: function(element, options) {
          return this.isFullscreen ? this.exit() : this.request(element, options);
        },
        onchange: function(callback) {
          this.on("change", callback);
        },
        onerror: function(callback) {
          this.on("error", callback);
        },
        on: function(event, callback) {
          var eventName = eventNameMap[event];
          if (eventName) {
            document2.addEventListener(eventName, callback, false);
          }
        },
        off: function(event, callback) {
          var eventName = eventNameMap[event];
          if (eventName) {
            document2.removeEventListener(eventName, callback, false);
          }
        },
        raw: fn
      };
      if (!fn) {
        if (isCommonjs) {
          module.exports = { isEnabled: false };
        } else {
          window.screenfull = { isEnabled: false };
        }
        return;
      }
      Object.defineProperties(screenfull2, {
        isFullscreen: {
          get: function() {
            return Boolean(document2[fn.fullscreenElement]);
          }
        },
        element: {
          enumerable: true,
          get: function() {
            return document2[fn.fullscreenElement];
          }
        },
        isEnabled: {
          enumerable: true,
          get: function() {
            return Boolean(document2[fn.fullscreenEnabled]);
          }
        }
      });
      if (isCommonjs) {
        module.exports = screenfull2;
      } else {
        window.screenfull = screenfull2;
      }
    })();
  }
});

// node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  "node_modules/tslib/tslib.js"(exports, module) {
    var __extends2;
    var __assign4;
    var __rest2;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values2;
    var __read2;
    var __spread;
    var __spreadArrays2;
    var __spreadArray2;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module === "object" && typeof module.exports === "object") {
        factory(createExporter(root, createExporter(module.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous2) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous2 ? previous2(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends2 = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign4 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest2 = function(s, e2) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e2.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e2.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e2) {
              reject(e2);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e2) {
              reject(e2);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (g && (g = 0, op[0] && (_ = 0)), _)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e2) {
              op = [6, e2];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values2 = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read2 = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e2;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e2 = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e2)
              throw e2.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read2(arguments[i]));
        return ar;
      };
      __spreadArrays2 = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray2 = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e2) {
            settle(q[0][3], e2);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e2) {
          throw e2;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values2 === "function" ? __values2(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends2);
      exporter("__assign", __assign4);
      exporter("__rest", __rest2);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values2);
      exporter("__read", __read2);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays2);
      exporter("__spreadArray", __spreadArray2);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/react-universal-interface/lib/render.js
var require_render = __commonJS({
  "node_modules/react-universal-interface/lib/render.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    var react_1 = require_react();
    var isReact16Plus = parseInt(react_1.version.substr(0, react_1.version.indexOf("."))) > 15;
    var isFn = function(fn) {
      return typeof fn === "function";
    };
    var render2 = function(props, data) {
      var more = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        more[_i - 2] = arguments[_i];
      }
      if (true) {
        if (typeof props !== "object") {
          throw new TypeError("renderChildren(props, data) first argument must be a props object.");
        }
        var children_1 = props.children, render_1 = props.render;
        if (isFn(children_1) && isFn(render_1)) {
          console.warn('Both "render" and "children" are specified for in a universal interface component. Children will be used.');
          console.trace();
        }
        if (typeof data !== "object") {
          console.warn("Universal component interface normally expects data to be an object, " + ('"' + typeof data + '" received.'));
          console.trace();
        }
      }
      var render3 = props.render, _a = props.children, children = _a === void 0 ? render3 : _a, component = props.component, _b = props.comp, comp = _b === void 0 ? component : _b;
      if (isFn(children))
        return children.apply(void 0, tslib_1.__spreadArrays([data], more));
      if (comp) {
        return react_1.createElement(comp, data);
      }
      if (children instanceof Array)
        return isReact16Plus ? children : react_1.createElement.apply(void 0, tslib_1.__spreadArrays(["div", null], children));
      if (children && children instanceof Object) {
        if (true) {
          if (!children.type || typeof children.type !== "string" && typeof children.type !== "function" && typeof children.type !== "symbol") {
            console.warn('Universal component interface received object as children, expected React element, but received unexpected React "type".');
            console.trace();
          }
          if (typeof children.type === "string")
            return children;
          return react_1.cloneElement(children, Object.assign({}, children.props, data));
        } else {
          if (typeof children.type === "string")
            return children;
          return react_1.cloneElement(children, Object.assign({}, children.props, data));
        }
      }
      return children || null;
    };
    exports.default = render2;
  }
});

// node_modules/react-universal-interface/lib/wrapInStatefulComponent.js
var require_wrapInStatefulComponent = __commonJS({
  "node_modules/react-universal-interface/lib/wrapInStatefulComponent.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    var React5 = tslib_1.__importStar(require_react());
    var wrapInStatefulComponent = function(Comp) {
      var Decorated = function(_super) {
        tslib_1.__extends(class_1, _super);
        function class_1() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        class_1.prototype.render = function() {
          return Comp(this.props, this.context);
        };
        return class_1;
      }(React5.Component);
      if (true) {
        Decorated.displayName = "Decorated(" + (Comp.displayName || Comp.name) + ")";
      }
      return Decorated;
    };
    exports.default = wrapInStatefulComponent;
  }
});

// node_modules/react-universal-interface/lib/addClassDecoratorSupport.js
var require_addClassDecoratorSupport = __commonJS({
  "node_modules/react-universal-interface/lib/addClassDecoratorSupport.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    var wrapInStatefulComponent_1 = tslib_1.__importDefault(require_wrapInStatefulComponent());
    var addClassDecoratorSupport = function(Comp) {
      var isSFC = !Comp.prototype;
      return !isSFC ? Comp : wrapInStatefulComponent_1.default(Comp);
    };
    exports.default = addClassDecoratorSupport;
  }
});

// node_modules/react-universal-interface/lib/createEnhancer.js
var require_createEnhancer = __commonJS({
  "node_modules/react-universal-interface/lib/createEnhancer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.divWrapper = void 0;
    var tslib_1 = require_tslib();
    var React5 = tslib_1.__importStar(require_react());
    var addClassDecoratorSupport_1 = tslib_1.__importDefault(require_addClassDecoratorSupport());
    var h = React5.createElement;
    var noWrap = function(Comp, propName, props, state) {
      var _a;
      return h(Comp, propName ? tslib_1.__assign((_a = {}, _a[propName] = state, _a), props) : tslib_1.__assign(tslib_1.__assign({}, state), props));
    };
    exports.divWrapper = function(Comp, propName, props, state) {
      return h("div", null, noWrap(Comp, propName, props, state));
    };
    var createEnhancer = function(Facc, prop, wrapper) {
      if (wrapper === void 0) {
        wrapper = noWrap;
      }
      var enhancer = function(Comp, propName, faccProps) {
        if (propName === void 0) {
          propName = prop;
        }
        if (faccProps === void 0) {
          faccProps = null;
        }
        var isClassDecoratorMethodCall = typeof Comp === "string";
        if (isClassDecoratorMethodCall) {
          return function(Klass) {
            return enhancer(Klass, Comp || prop, propName);
          };
        }
        var Enhanced = function(props) {
          return h(Facc, faccProps, function(state) {
            return wrapper(Comp, propName, props, state);
          });
        };
        if (true) {
          Enhanced.displayName = (Facc.displayName || Facc.name) + "(" + (Comp.displayName || Comp.name) + ")";
        }
        return isClassDecoratorMethodCall ? addClassDecoratorSupport_1.default(Enhanced) : Enhanced;
      };
      return enhancer;
    };
    exports.default = createEnhancer;
  }
});

// node_modules/react-universal-interface/lib/hookToRenderProp.js
var require_hookToRenderProp = __commonJS({
  "node_modules/react-universal-interface/lib/hookToRenderProp.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    var render_1 = tslib_1.__importDefault(require_render());
    var defaultMapPropsToArgs = function(props) {
      return [props];
    };
    var hookToRenderProp = function(hook, mapPropsToArgs) {
      if (mapPropsToArgs === void 0) {
        mapPropsToArgs = defaultMapPropsToArgs;
      }
      return function(props) {
        return render_1.default(props, hook.apply(void 0, mapPropsToArgs(props)));
      };
    };
    exports.default = hookToRenderProp;
  }
});

// node_modules/react-universal-interface/lib/index.js
var require_lib = __commonJS({
  "node_modules/react-universal-interface/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hookToRenderProp = exports.createEnhancer = exports.render = void 0;
    var tslib_1 = require_tslib();
    var render_1 = tslib_1.__importDefault(require_render());
    exports.render = render_1.default;
    var createEnhancer_1 = tslib_1.__importDefault(require_createEnhancer());
    exports.createEnhancer = createEnhancer_1.default;
    var hookToRenderProp_1 = tslib_1.__importDefault(require_hookToRenderProp());
    exports.hookToRenderProp = hookToRenderProp_1.default;
  }
});

// node_modules/fast-shallow-equal/index.js
var require_fast_shallow_equal = __commonJS({
  "node_modules/fast-shallow-equal/index.js"(exports) {
    var keyList = Object.keys;
    exports.equal = function equal2(a, b) {
      if (a === b)
        return true;
      if (!(a instanceof Object) || !(b instanceof Object))
        return false;
      var keys = keyList(a);
      var length = keys.length;
      for (var i = 0; i < length; i++)
        if (!(keys[i] in b))
          return false;
      for (var i = 0; i < length; i++)
        if (a[keys[i]] !== b[keys[i]])
          return false;
      return length === keyList(b).length;
    };
  }
});

// node_modules/ts-easing/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/ts-easing/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.easing = {
      // No easing, no acceleration
      linear: function(t) {
        return t;
      },
      // Accelerates fast, then slows quickly towards end.
      quadratic: function(t) {
        return t * (-(t * t) * t + 4 * t * t - 6 * t + 4);
      },
      // Overshoots over 1 and then returns to 1 towards end.
      cubic: function(t) {
        return t * (4 * t * t - 9 * t + 6);
      },
      // Overshoots over 1 multiple times - wiggles around 1.
      elastic: function(t) {
        return t * (33 * t * t * t * t - 106 * t * t * t + 126 * t * t - 67 * t + 15);
      },
      // Accelerating from zero velocity
      inQuad: function(t) {
        return t * t;
      },
      // Decelerating to zero velocity
      outQuad: function(t) {
        return t * (2 - t);
      },
      // Acceleration until halfway, then deceleration
      inOutQuad: function(t) {
        return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
      },
      // Accelerating from zero velocity
      inCubic: function(t) {
        return t * t * t;
      },
      // Decelerating to zero velocity
      outCubic: function(t) {
        return --t * t * t + 1;
      },
      // Acceleration until halfway, then deceleration
      inOutCubic: function(t) {
        return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
      },
      // Accelerating from zero velocity
      inQuart: function(t) {
        return t * t * t * t;
      },
      // Decelerating to zero velocity
      outQuart: function(t) {
        return 1 - --t * t * t * t;
      },
      // Acceleration until halfway, then deceleration
      inOutQuart: function(t) {
        return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;
      },
      // Accelerating from zero velocity
      inQuint: function(t) {
        return t * t * t * t * t;
      },
      // Decelerating to zero velocity
      outQuint: function(t) {
        return 1 + --t * t * t * t * t;
      },
      // Acceleration until halfway, then deceleration
      inOutQuint: function(t) {
        return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;
      },
      // Accelerating from zero velocity
      inSine: function(t) {
        return -Math.cos(t * (Math.PI / 2)) + 1;
      },
      // Decelerating to zero velocity
      outSine: function(t) {
        return Math.sin(t * (Math.PI / 2));
      },
      // Accelerating until halfway, then decelerating
      inOutSine: function(t) {
        return -(Math.cos(Math.PI * t) - 1) / 2;
      },
      // Exponential accelerating from zero velocity
      inExpo: function(t) {
        return Math.pow(2, 10 * (t - 1));
      },
      // Exponential decelerating to zero velocity
      outExpo: function(t) {
        return -Math.pow(2, -10 * t) + 1;
      },
      // Exponential accelerating until halfway, then decelerating
      inOutExpo: function(t) {
        t /= 0.5;
        if (t < 1)
          return Math.pow(2, 10 * (t - 1)) / 2;
        t--;
        return (-Math.pow(2, -10 * t) + 2) / 2;
      },
      // Circular accelerating from zero velocity
      inCirc: function(t) {
        return -Math.sqrt(1 - t * t) + 1;
      },
      // Circular decelerating to zero velocity Moves VERY fast at the beginning and
      // then quickly slows down in the middle. This tween can actually be used
      // in continuous transitions where target value changes all the time,
      // because of the very quick start, it hides the jitter between target value changes.
      outCirc: function(t) {
        return Math.sqrt(1 - (t = t - 1) * t);
      },
      // Circular acceleration until halfway, then deceleration
      inOutCirc: function(t) {
        t /= 0.5;
        if (t < 1)
          return -(Math.sqrt(1 - t * t) - 1) / 2;
        t -= 2;
        return (Math.sqrt(1 - t * t) + 1) / 2;
      }
    };
  }
});

// node_modules/exenv/index.js
var require_exenv = __commonJS({
  "node_modules/exenv/index.js"(exports, module) {
    (function() {
      "use strict";
      var canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);
      var ExecutionEnvironment = {
        canUseDOM,
        canUseWorkers: typeof Worker !== "undefined",
        canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
        canUseViewport: canUseDOM && !!window.screen
      };
      if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
        define(function() {
          return ExecutionEnvironment;
        });
      } else if (typeof module !== "undefined" && module.exports) {
        module.exports = ExecutionEnvironment;
      } else {
        window.ExecutionEnvironment = ExecutionEnvironment;
      }
    })();
  }
});

// node_modules/react-spotify-web-playback/dist/index.mjs
var import_react100 = __toESM(require_react(), 1);

// node_modules/@gilbarbara/deep-equal/esm/helpers.js
function isOfType(type) {
  return function(value) {
    return typeof value === type;
  };
}
var isFunction = isOfType("function");
var isNull = function(value) {
  return value === null;
};
var isRegex = function(value) {
  return Object.prototype.toString.call(value).slice(8, -1) === "RegExp";
};
var isObject = function(value) {
  return !isUndefined(value) && !isNull(value) && (isFunction(value) || typeof value === "object");
};
var isUndefined = isOfType("undefined");

// node_modules/@gilbarbara/deep-equal/esm/index.js
var __values = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
function equalArray(left, right) {
  var length = left.length;
  if (length !== right.length) {
    return false;
  }
  for (var index = length; index-- !== 0; ) {
    if (!equal(left[index], right[index])) {
      return false;
    }
  }
  return true;
}
function equalArrayBuffer(left, right) {
  if (left.byteLength !== right.byteLength) {
    return false;
  }
  var view1 = new DataView(left.buffer);
  var view2 = new DataView(right.buffer);
  var index = left.byteLength;
  while (index--) {
    if (view1.getUint8(index) !== view2.getUint8(index)) {
      return false;
    }
  }
  return true;
}
function equalMap(left, right) {
  var e_1, _a, e_2, _b;
  if (left.size !== right.size) {
    return false;
  }
  try {
    for (var _c = __values(left.entries()), _d = _c.next(); !_d.done; _d = _c.next()) {
      var index = _d.value;
      if (!right.has(index[0])) {
        return false;
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_d && !_d.done && (_a = _c.return))
        _a.call(_c);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  try {
    for (var _e = __values(left.entries()), _f = _e.next(); !_f.done; _f = _e.next()) {
      var index = _f.value;
      if (!equal(index[1], right.get(index[0]))) {
        return false;
      }
    }
  } catch (e_2_1) {
    e_2 = { error: e_2_1 };
  } finally {
    try {
      if (_f && !_f.done && (_b = _e.return))
        _b.call(_e);
    } finally {
      if (e_2)
        throw e_2.error;
    }
  }
  return true;
}
function equalSet(left, right) {
  var e_3, _a;
  if (left.size !== right.size) {
    return false;
  }
  try {
    for (var _b = __values(left.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
      var index = _c.value;
      if (!right.has(index[0])) {
        return false;
      }
    }
  } catch (e_3_1) {
    e_3 = { error: e_3_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return))
        _a.call(_b);
    } finally {
      if (e_3)
        throw e_3.error;
    }
  }
  return true;
}
function equal(left, right) {
  if (left === right) {
    return true;
  }
  if (left && isObject(left) && right && isObject(right)) {
    if (left.constructor !== right.constructor) {
      return false;
    }
    if (Array.isArray(left) && Array.isArray(right)) {
      return equalArray(left, right);
    }
    if (left instanceof Map && right instanceof Map) {
      return equalMap(left, right);
    }
    if (left instanceof Set && right instanceof Set) {
      return equalSet(left, right);
    }
    if (ArrayBuffer.isView(left) && ArrayBuffer.isView(right)) {
      return equalArrayBuffer(left, right);
    }
    if (isRegex(left) && isRegex(right)) {
      return left.source === right.source && left.flags === right.flags;
    }
    if (left.valueOf !== Object.prototype.valueOf) {
      return left.valueOf() === right.valueOf();
    }
    if (left.toString !== Object.prototype.toString) {
      return left.toString() === right.toString();
    }
    var leftKeys = Object.keys(left);
    var rightKeys = Object.keys(right);
    if (leftKeys.length !== rightKeys.length) {
      return false;
    }
    for (var index = leftKeys.length; index-- !== 0; ) {
      if (!Object.prototype.hasOwnProperty.call(right, leftKeys[index])) {
        return false;
      }
    }
    for (var index = leftKeys.length; index-- !== 0; ) {
      var key = leftKeys[index];
      if (key === "_owner" && left.$$typeof) {
        continue;
      }
      if (!equal(left[key], right[key])) {
        return false;
      }
    }
    return true;
  }
  if (Number.isNaN(left) && Number.isNaN(right)) {
    return true;
  }
  return left === right;
}

// node_modules/memoize-one/dist/memoize-one.esm.js
var safeIsNaN = Number.isNaN || function ponyfill(value) {
  return typeof value === "number" && value !== value;
};
function isEqual(first, second) {
  if (first === second) {
    return true;
  }
  if (safeIsNaN(first) && safeIsNaN(second)) {
    return true;
  }
  return false;
}
function areInputsEqual(newInputs, lastInputs) {
  if (newInputs.length !== lastInputs.length) {
    return false;
  }
  for (var i = 0; i < newInputs.length; i++) {
    if (!isEqual(newInputs[i], lastInputs[i])) {
      return false;
    }
  }
  return true;
}
function memoizeOne(resultFn, isEqual2) {
  if (isEqual2 === void 0) {
    isEqual2 = areInputsEqual;
  }
  var cache = null;
  function memoized() {
    var newArgs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      newArgs[_i] = arguments[_i];
    }
    if (cache && cache.lastThis === this && isEqual2(newArgs, cache.lastArgs)) {
      return cache.lastResult;
    }
    var lastResult = resultFn.apply(this, newArgs);
    cache = {
      lastResult,
      lastArgs: newArgs,
      lastThis: this
    };
    return lastResult;
  }
  memoized.clear = function clear() {
    cache = null;
  };
  return memoized;
}

// node_modules/react-spotify-web-playback/dist/index.mjs
var import_react101 = __toESM(require_react(), 1);
var import_react102 = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_react103 = __toESM(require_react(), 1);
var import_nano_css2 = __toESM(require_nano_css(), 1);
var import_jsx = __toESM(require_jsx(), 1);
var import_keyframes = __toESM(require_keyframes(), 1);
var import_nesting = __toESM(require_nesting(), 1);
var import_rule = __toESM(require_rule(), 1);
var import_style = __toESM(require_style(), 1);
var import_styled = __toESM(require_styled(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var import_react104 = __toESM(require_react(), 1);

// node_modules/react-use/esm/factory/createMemo.js
var import_react = __toESM(require_react());

// node_modules/react-use/esm/factory/createReducerContext.js
var import_react2 = __toESM(require_react());

// node_modules/react-use/esm/factory/createReducer.js
var import_react5 = __toESM(require_react());

// node_modules/react-use/esm/useUpdateEffect.js
var import_react4 = __toESM(require_react());

// node_modules/react-use/esm/useFirstMountState.js
var import_react3 = __toESM(require_react());

// node_modules/react-use/esm/factory/createStateContext.js
var import_react6 = __toESM(require_react());

// node_modules/react-use/esm/useAsync.js
var import_react9 = __toESM(require_react());

// node_modules/tslib/tslib.es6.js
var __assign = function() {
  __assign = Object.assign || function __assign4(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};

// node_modules/react-use/esm/useAsyncFn.js
var import_react8 = __toESM(require_react());

// node_modules/react-use/esm/useMountedState.js
var import_react7 = __toESM(require_react());

// node_modules/react-use/esm/useAsyncRetry.js
var import_react10 = __toESM(require_react());

// node_modules/react-use/esm/factory/createHTMLMediaHook.js
var React = __toESM(require_react());
var import_react12 = __toESM(require_react());

// node_modules/react-use/esm/useSetState.js
var import_react11 = __toESM(require_react());
var useSetState = function(initialState) {
  if (initialState === void 0) {
    initialState = {};
  }
  var _a = (0, import_react11.useState)(initialState), state = _a[0], set = _a[1];
  var setState = (0, import_react11.useCallback)(function(patch) {
    set(function(prevState) {
      return Object.assign({}, prevState, patch instanceof Function ? patch(prevState) : patch);
    });
  }, []);
  return [state, setState];
};
var useSetState_default = useSetState;

// node_modules/react-use/esm/misc/parseTimeRanges.js
function parseTimeRanges(ranges) {
  var result = [];
  for (var i = 0; i < ranges.length; i++) {
    result.push({
      start: ranges.start(i),
      end: ranges.end(i)
    });
  }
  return result;
}

// node_modules/react-use/esm/factory/createHTMLMediaHook.js
function createHTMLMediaHook(tag) {
  return function(elOrProps) {
    var element;
    var props;
    if (React.isValidElement(elOrProps)) {
      element = elOrProps;
      props = element.props;
    } else {
      props = elOrProps;
    }
    var _a = useSetState_default({
      buffered: [],
      time: 0,
      duration: 0,
      paused: true,
      muted: false,
      volume: 1,
      playing: false
    }), state = _a[0], setState = _a[1];
    var ref = (0, import_react12.useRef)(null);
    var wrapEvent = function(userEvent, proxyEvent) {
      return function(event) {
        try {
          proxyEvent && proxyEvent(event);
        } finally {
          userEvent && userEvent(event);
        }
      };
    };
    var onPlay = function() {
      return setState({ paused: false });
    };
    var onPlaying = function() {
      return setState({ playing: true });
    };
    var onWaiting = function() {
      return setState({ playing: false });
    };
    var onPause = function() {
      return setState({ paused: true, playing: false });
    };
    var onVolumeChange = function() {
      var el = ref.current;
      if (!el) {
        return;
      }
      setState({
        muted: el.muted,
        volume: el.volume
      });
    };
    var onDurationChange = function() {
      var el = ref.current;
      if (!el) {
        return;
      }
      var duration = el.duration, buffered = el.buffered;
      setState({
        duration,
        buffered: parseTimeRanges(buffered)
      });
    };
    var onTimeUpdate = function() {
      var el = ref.current;
      if (!el) {
        return;
      }
      setState({ time: el.currentTime });
    };
    var onProgress = function() {
      var el = ref.current;
      if (!el) {
        return;
      }
      setState({ buffered: parseTimeRanges(el.buffered) });
    };
    if (element) {
      element = React.cloneElement(element, __assign(__assign({ controls: false }, props), { ref, onPlay: wrapEvent(props.onPlay, onPlay), onPlaying: wrapEvent(props.onPlaying, onPlaying), onWaiting: wrapEvent(props.onWaiting, onWaiting), onPause: wrapEvent(props.onPause, onPause), onVolumeChange: wrapEvent(props.onVolumeChange, onVolumeChange), onDurationChange: wrapEvent(props.onDurationChange, onDurationChange), onTimeUpdate: wrapEvent(props.onTimeUpdate, onTimeUpdate), onProgress: wrapEvent(props.onProgress, onProgress) }));
    } else {
      element = React.createElement(tag, __assign(__assign({ controls: false }, props), { ref, onPlay: wrapEvent(props.onPlay, onPlay), onPlaying: wrapEvent(props.onPlaying, onPlaying), onWaiting: wrapEvent(props.onWaiting, onWaiting), onPause: wrapEvent(props.onPause, onPause), onVolumeChange: wrapEvent(props.onVolumeChange, onVolumeChange), onDurationChange: wrapEvent(props.onDurationChange, onDurationChange), onTimeUpdate: wrapEvent(props.onTimeUpdate, onTimeUpdate), onProgress: wrapEvent(props.onProgress, onProgress) }));
    }
    var lockPlay = false;
    var controls = {
      play: function() {
        var el = ref.current;
        if (!el) {
          return void 0;
        }
        if (!lockPlay) {
          var promise = el.play();
          var isPromise = typeof promise === "object";
          if (isPromise) {
            lockPlay = true;
            var resetLock = function() {
              lockPlay = false;
            };
            promise.then(resetLock, resetLock);
          }
          return promise;
        }
        return void 0;
      },
      pause: function() {
        var el = ref.current;
        if (el && !lockPlay) {
          return el.pause();
        }
      },
      seek: function(time) {
        var el = ref.current;
        if (!el || state.duration === void 0) {
          return;
        }
        time = Math.min(state.duration, Math.max(0, time));
        el.currentTime = time;
      },
      volume: function(volume) {
        var el = ref.current;
        if (!el) {
          return;
        }
        volume = Math.min(1, Math.max(0, volume));
        el.volume = volume;
        setState({ volume });
      },
      mute: function() {
        var el = ref.current;
        if (!el) {
          return;
        }
        el.muted = true;
      },
      unmute: function() {
        var el = ref.current;
        if (!el) {
          return;
        }
        el.muted = false;
      }
    };
    (0, import_react12.useEffect)(function() {
      var el = ref.current;
      if (!el) {
        if (true) {
          if (tag === "audio") {
            console.error("useAudio() ref to <audio> element is empty at mount. It seem you have not rendered the audio element, which it returns as the first argument const [audio] = useAudio(...).");
          } else if (tag === "video") {
            console.error("useVideo() ref to <video> element is empty at mount. It seem you have not rendered the video element, which it returns as the first argument const [video] = useVideo(...).");
          }
        }
        return;
      }
      setState({
        volume: el.volume,
        muted: el.muted,
        paused: el.paused
      });
      if (props.autoPlay && el.paused) {
        controls.play();
      }
    }, [props.src]);
    return [element, state, controls, ref];
  };
}

// node_modules/react-use/esm/useAudio.js
var useAudio = createHTMLMediaHook("audio");

// node_modules/react-use/esm/useBattery.js
var import_react14 = __toESM(require_react());

// node_modules/react-use/esm/misc/util.js
var noop = function() {
};
function on(obj) {
  var args = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    args[_i - 1] = arguments[_i];
  }
  if (obj && obj.addEventListener) {
    obj.addEventListener.apply(obj, args);
  }
}
function off(obj) {
  var args = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    args[_i - 1] = arguments[_i];
  }
  if (obj && obj.removeEventListener) {
    obj.removeEventListener.apply(obj, args);
  }
}
var isBrowser = typeof window !== "undefined";
var isNavigator = typeof navigator !== "undefined";

// node_modules/react-use/esm/misc/isDeepEqual.js
var import_react13 = __toESM(require_react2());

// node_modules/react-use/esm/useBattery.js
var nav = isNavigator ? navigator : void 0;
var isBatteryApiSupported = nav && typeof nav.getBattery === "function";

// node_modules/react-use/esm/useBeforeUnload.js
var import_react15 = __toESM(require_react());

// node_modules/react-use/esm/useToggle.js
var import_react16 = __toESM(require_react());

// node_modules/react-use/esm/useClickAway.js
var import_react17 = __toESM(require_react());

// node_modules/react-use/esm/useCookie.js
var import_react18 = __toESM(require_react());
var import_js_cookie = __toESM(require_js_cookie());

// node_modules/react-use/esm/useCopyToClipboard.js
var import_copy_to_clipboard = __toESM(require_copy_to_clipboard());
var import_react19 = __toESM(require_react());

// node_modules/react-use/esm/useCounter.js
var import_react22 = __toESM(require_react());

// node_modules/react-use/esm/useGetSet.js
var import_react21 = __toESM(require_react());

// node_modules/react-use/esm/useUpdate.js
var import_react20 = __toESM(require_react());

// node_modules/react-use/esm/useCss.js
var import_nano_css = __toESM(require_nano_css());
var import_cssom = __toESM(require_cssom());
var import_vcssom = __toESM(require_vcssom());
var import_cssToTree = __toESM(require_cssToTree());
var import_react24 = __toESM(require_react());

// node_modules/react-use/esm/useIsomorphicLayoutEffect.js
var import_react23 = __toESM(require_react());
var useIsomorphicLayoutEffect = isBrowser ? import_react23.useLayoutEffect : import_react23.useEffect;
var useIsomorphicLayoutEffect_default = useIsomorphicLayoutEffect;

// node_modules/react-use/esm/useCss.js
var nano = (0, import_nano_css.create)();
(0, import_cssom.addon)(nano);
(0, import_vcssom.addon)(nano);

// node_modules/react-use/esm/useCustomCompareEffect.js
var import_react25 = __toESM(require_react());

// node_modules/react-use/esm/useDebounce.js
var import_react27 = __toESM(require_react());

// node_modules/react-use/esm/useTimeoutFn.js
var import_react26 = __toESM(require_react());

// node_modules/react-use/esm/useDefault.js
var import_react28 = __toESM(require_react());

// node_modules/react-use/esm/useDrop.js
var import_react29 = __toESM(require_react());

// node_modules/react-use/esm/useDropArea.js
var import_react30 = __toESM(require_react());

// node_modules/react-use/esm/useEffectOnce.js
var import_react31 = __toESM(require_react());
var useEffectOnce = function(effect) {
  (0, import_react31.useEffect)(effect, []);
};
var useEffectOnce_default = useEffectOnce;

// node_modules/react-use/esm/useEnsuredForwardedRef.js
var import_react32 = __toESM(require_react());

// node_modules/react-use/esm/useEvent.js
var import_react33 = __toESM(require_react());

// node_modules/react-use/esm/useError.js
var import_react34 = __toESM(require_react());

// node_modules/react-use/esm/useFavicon.js
var import_react35 = __toESM(require_react());

// node_modules/react-use/esm/useFullscreen.js
var import_react36 = __toESM(require_react());
var import_screenfull = __toESM(require_screenfull());

// node_modules/react-use/esm/useGeolocation.js
var import_react37 = __toESM(require_react());

// node_modules/react-use/esm/useGetSetState.js
var import_react38 = __toESM(require_react());

// node_modules/react-use/esm/useHarmonicIntervalFn.js
var import_react39 = __toESM(require_react());

// node_modules/react-use/esm/useHover.js
var React2 = __toESM(require_react());

// node_modules/react-use/esm/useHoverDirty.js
var import_react40 = __toESM(require_react());

// node_modules/react-use/esm/useIdle.js
var import_react41 = __toESM(require_react());

// node_modules/react-use/esm/useIntersection.js
var import_react42 = __toESM(require_react());

// node_modules/react-use/esm/useInterval.js
var import_react43 = __toESM(require_react());

// node_modules/react-use/esm/useKey.js
var import_react44 = __toESM(require_react());

// node_modules/react-use/esm/factory/createBreakpoint.js
var import_react45 = __toESM(require_react());

// node_modules/react-use/esm/useKeyPress.js
var import_react46 = __toESM(require_react());

// node_modules/react-use/esm/useLatest.js
var import_react47 = __toESM(require_react());

// node_modules/react-use/esm/useLifecycles.js
var import_react48 = __toESM(require_react());

// node_modules/react-use/esm/useList.js
var import_react49 = __toESM(require_react());

// node_modules/react-use/esm/useLocalStorage.js
var import_react50 = __toESM(require_react());

// node_modules/react-use/esm/useLocation.js
var import_react51 = __toESM(require_react());
var patchHistoryMethod = function(method) {
  var history = window.history;
  var original = history[method];
  history[method] = function(state) {
    var result = original.apply(this, arguments);
    var event = new Event(method.toLowerCase());
    event.state = state;
    window.dispatchEvent(event);
    return result;
  };
};
if (isBrowser) {
  patchHistoryMethod("pushState");
  patchHistoryMethod("replaceState");
}

// node_modules/react-use/esm/useLockBodyScroll.js
var import_react52 = __toESM(require_react());
var isIosDevice = isBrowser && window.navigator && window.navigator.platform && /iP(ad|hone|od)/.test(window.navigator.platform);

// node_modules/react-use/esm/useLongPress.js
var import_react53 = __toESM(require_react());

// node_modules/react-use/esm/useMap.js
var import_react54 = __toESM(require_react());

// node_modules/react-use/esm/useMedia.js
var import_react55 = __toESM(require_react());

// node_modules/react-use/esm/useMediaDevices.js
var import_react56 = __toESM(require_react());
var useMediaDevices = function() {
  var _a = (0, import_react56.useState)({}), state = _a[0], setState = _a[1];
  (0, import_react56.useEffect)(function() {
    var mounted = true;
    var onChange = function() {
      navigator.mediaDevices.enumerateDevices().then(function(devices) {
        if (mounted) {
          setState({
            devices: devices.map(function(_a2) {
              var deviceId = _a2.deviceId, groupId = _a2.groupId, kind = _a2.kind, label = _a2.label;
              return {
                deviceId,
                groupId,
                kind,
                label
              };
            })
          });
        }
      }).catch(noop);
    };
    on(navigator.mediaDevices, "devicechange", onChange);
    onChange();
    return function() {
      mounted = false;
      off(navigator.mediaDevices, "devicechange", onChange);
    };
  }, []);
  return state;
};
var useMediaDevicesMock = function() {
  return {};
};
var useMediaDevices_default = isNavigator && !!navigator.mediaDevices ? useMediaDevices : useMediaDevicesMock;

// node_modules/react-use/esm/useMediatedState.js
var import_react57 = __toESM(require_react());

// node_modules/react-use/esm/useMethods.js
var import_react58 = __toESM(require_react());

// node_modules/react-use/esm/useMotion.js
var import_react59 = __toESM(require_react());

// node_modules/react-use/esm/useMount.js
var useMount = function(fn) {
  useEffectOnce_default(function() {
    fn();
  });
};
var useMount_default = useMount;

// node_modules/react-use/esm/useMouse.js
var import_react62 = __toESM(require_react());

// node_modules/react-use/esm/useRafState.js
var import_react61 = __toESM(require_react());

// node_modules/react-use/esm/useUnmount.js
var import_react60 = __toESM(require_react());
var useUnmount = function(fn) {
  var fnRef = (0, import_react60.useRef)(fn);
  fnRef.current = fn;
  useEffectOnce_default(function() {
    return function() {
      return fnRef.current();
    };
  });
};
var useUnmount_default = useUnmount;

// node_modules/react-use/esm/useMouseWheel.js
var import_react63 = __toESM(require_react());

// node_modules/react-use/esm/useNetworkState.js
var import_react64 = __toESM(require_react());
var nav2 = isNavigator ? navigator : void 0;
var conn = nav2 && (nav2.connection || nav2.mozConnection || nav2.webkitConnection);

// node_modules/react-use/esm/useObservable.js
var import_react65 = __toESM(require_react());

// node_modules/react-use/esm/useOrientation.js
var import_react66 = __toESM(require_react());

// node_modules/react-use/esm/usePageLeave.js
var import_react67 = __toESM(require_react());

// node_modules/react-use/esm/usePermission.js
var import_react68 = __toESM(require_react());

// node_modules/react-use/esm/usePrevious.js
var import_react69 = __toESM(require_react());
function usePrevious(state) {
  var ref = (0, import_react69.useRef)();
  (0, import_react69.useEffect)(function() {
    ref.current = state;
  });
  return ref.current;
}

// node_modules/react-use/esm/usePreviousDistinct.js
var import_react70 = __toESM(require_react());

// node_modules/react-use/esm/usePromise.js
var import_react71 = __toESM(require_react());

// node_modules/react-use/esm/useQueue.js
var import_react72 = __toESM(require_react());

// node_modules/react-use/esm/useRaf.js
var import_react73 = __toESM(require_react());

// node_modules/react-use/esm/useRafLoop.js
var import_react74 = __toESM(require_react());

// node_modules/react-use/esm/useSearchParam.js
var import_react75 = __toESM(require_react());

// node_modules/react-use/esm/useScratch.js
var import_react76 = __toESM(require_react());
var import_react_universal_interface = __toESM(require_lib());

// node_modules/react-use/esm/useScroll.js
var import_react77 = __toESM(require_react());

// node_modules/react-use/esm/useScrolling.js
var import_react78 = __toESM(require_react());

// node_modules/react-use/esm/useSessionStorage.js
var import_react79 = __toESM(require_react());

// node_modules/react-use/esm/useShallowCompareEffect.js
var import_fast_shallow_equal = __toESM(require_fast_shallow_equal());

// node_modules/react-use/esm/useSize.js
var React3 = __toESM(require_react());

// node_modules/react-use/esm/useSlider.js
var import_react80 = __toESM(require_react());

// node_modules/react-use/esm/useSpeech.js
var import_react81 = __toESM(require_react());
var Status;
(function(Status2) {
  Status2[Status2["init"] = 0] = "init";
  Status2[Status2["play"] = 1] = "play";
  Status2[Status2["pause"] = 2] = "pause";
  Status2[Status2["end"] = 3] = "end";
})(Status || (Status = {}));

// node_modules/react-use/esm/useStateWithHistory.js
var import_react82 = __toESM(require_react());

// node_modules/react-use/esm/useStateList.js
var import_react83 = __toESM(require_react());

// node_modules/react-use/esm/useThrottle.js
var import_react84 = __toESM(require_react());

// node_modules/react-use/esm/useThrottleFn.js
var import_react85 = __toESM(require_react());

// node_modules/react-use/esm/useTitle.js
var import_react86 = __toESM(require_react());

// node_modules/react-use/esm/useTween.js
var import_ts_easing = __toESM(require_lib2());

// node_modules/react-use/esm/useUnmountPromise.js
var import_react87 = __toESM(require_react());

// node_modules/react-use/esm/useVibrate.js
var import_react88 = __toESM(require_react());
var isVibrationApiSupported = isNavigator && "vibrate" in navigator;

// node_modules/react-use/esm/useVideo.js
var useVideo = createHTMLMediaHook("video");

// node_modules/react-use/esm/useStateValidator.js
var import_react89 = __toESM(require_react());

// node_modules/react-use/esm/useScrollbarWidth.js
var import_react90 = __toESM(require_react());

// node_modules/react-use/esm/useMultiStateValidator.js
var import_react91 = __toESM(require_react());

// node_modules/react-use/esm/useWindowScroll.js
var import_react92 = __toESM(require_react());

// node_modules/react-use/esm/useWindowSize.js
var import_react93 = __toESM(require_react());

// node_modules/react-use/esm/useMeasure.js
var import_react94 = __toESM(require_react());
var defaultState = {
  x: 0,
  y: 0,
  width: 0,
  height: 0,
  top: 0,
  left: 0,
  bottom: 0,
  right: 0
};
function useMeasure() {
  var _a = (0, import_react94.useState)(null), element = _a[0], ref = _a[1];
  var _b = (0, import_react94.useState)(defaultState), rect = _b[0], setRect = _b[1];
  var observer = (0, import_react94.useMemo)(function() {
    return new window.ResizeObserver(function(entries) {
      if (entries[0]) {
        var _a2 = entries[0].contentRect, x = _a2.x, y = _a2.y, width = _a2.width, height = _a2.height, top_1 = _a2.top, left = _a2.left, bottom = _a2.bottom, right = _a2.right;
        setRect({ x, y, width, height, top: top_1, left, bottom, right });
      }
    });
  }, []);
  useIsomorphicLayoutEffect_default(function() {
    if (!element)
      return;
    observer.observe(element);
    return function() {
      observer.disconnect();
    };
  }, [element]);
  return [ref, rect];
}
var useMeasure_default = isBrowser && typeof window.ResizeObserver !== "undefined" ? useMeasure : function() {
  return [noop, defaultState];
};

// node_modules/react-use/esm/usePinchZoom.js
var import_react95 = __toESM(require_react());
var ZoomState;
(function(ZoomState2) {
  ZoomState2["ZOOMING_IN"] = "ZOOMING_IN";
  ZoomState2["ZOOMING_OUT"] = "ZOOMING_OUT";
})(ZoomState || (ZoomState = {}));

// node_modules/react-use/esm/useRendersCount.js
var import_react96 = __toESM(require_react());

// node_modules/react-use/esm/useSet.js
var import_react97 = __toESM(require_react());

// node_modules/react-use/esm/factory/createGlobalState.js
var import_react98 = __toESM(require_react());

// node_modules/react-use/esm/useHash.js
var import_react99 = __toESM(require_react());

// node_modules/@gilbarbara/react-range-slider/esm/index.js
var React4 = __toESM(require_react());

// node_modules/deepmerge-ts/dist/node/index.mjs
function getObjectType(object) {
  if (typeof object !== "object" || object === null) {
    return 0;
  }
  if (Array.isArray(object)) {
    return 2;
  }
  if (isRecord(object)) {
    return 1;
  }
  if (object instanceof Set) {
    return 3;
  }
  if (object instanceof Map) {
    return 4;
  }
  return 5;
}
function getKeys(objects) {
  const keys = /* @__PURE__ */ new Set();
  for (const object of objects) {
    for (const key of [
      ...Object.keys(object),
      ...Object.getOwnPropertySymbols(object)
    ]) {
      keys.add(key);
    }
  }
  return keys;
}
function objectHasProperty(object, property) {
  return typeof object === "object" && Object.prototype.propertyIsEnumerable.call(object, property);
}
function getIterableOfIterables(iterables) {
  return {
    *[Symbol.iterator]() {
      for (const iterable of iterables) {
        for (const value of iterable) {
          yield value;
        }
      }
    }
  };
}
var validRecordToStringValues = /* @__PURE__ */ new Set([
  "[object Object]",
  "[object Module]"
]);
function isRecord(value) {
  if (!validRecordToStringValues.has(Object.prototype.toString.call(value))) {
    return false;
  }
  const { constructor } = value;
  if (constructor === void 0) {
    return true;
  }
  const prototype = constructor.prototype;
  if (prototype === null || typeof prototype !== "object" || !validRecordToStringValues.has(Object.prototype.toString.call(prototype))) {
    return false;
  }
  if (!prototype.hasOwnProperty("isPrototypeOf")) {
    return false;
  }
  return true;
}
var defaultMergeFunctions = {
  mergeMaps: defaultMergeMaps,
  mergeSets: defaultMergeSets,
  mergeArrays: defaultMergeArrays,
  mergeRecords: defaultMergeRecords,
  mergeOthers: leaf
};
var actions = {
  defaultMerge: Symbol("deepmerge-ts: default merge"),
  skip: Symbol("deepmerge-ts: skip")
};
function defaultMetaDataUpdater(previousMeta, metaMeta) {
  return metaMeta;
}
function deepmerge(...objects) {
  return deepmergeCustom({})(...objects);
}
function deepmergeCustom(options, rootMetaData) {
  const utils = getUtils(options, customizedDeepmerge);
  function customizedDeepmerge(...objects) {
    return mergeUnknowns(objects, utils, rootMetaData);
  }
  return customizedDeepmerge;
}
function getUtils(options, customizedDeepmerge) {
  var _a, _b;
  return {
    defaultMergeFunctions,
    mergeFunctions: {
      ...defaultMergeFunctions,
      ...Object.fromEntries(Object.entries(options).filter(([key, option]) => Object.prototype.hasOwnProperty.call(defaultMergeFunctions, key)).map(([key, option]) => option === false ? [key, leaf] : [key, option]))
    },
    metaDataUpdater: (_a = options.metaDataUpdater) !== null && _a !== void 0 ? _a : defaultMetaDataUpdater,
    deepmerge: customizedDeepmerge,
    useImplicitDefaultMerging: (_b = options.enableImplicitDefaultMerging) !== null && _b !== void 0 ? _b : false,
    actions
  };
}
function mergeUnknowns(values, utils, meta) {
  if (values.length === 0) {
    return void 0;
  }
  if (values.length === 1) {
    return mergeOthers(values, utils, meta);
  }
  const type = getObjectType(values[0]);
  if (type !== 0 && type !== 5) {
    for (let m_index = 1; m_index < values.length; m_index++) {
      if (getObjectType(values[m_index]) === type) {
        continue;
      }
      return mergeOthers(values, utils, meta);
    }
  }
  switch (type) {
    case 1:
      return mergeRecords(values, utils, meta);
    case 2:
      return mergeArrays(values, utils, meta);
    case 3:
      return mergeSets(values, utils, meta);
    case 4:
      return mergeMaps(values, utils, meta);
    default:
      return mergeOthers(values, utils, meta);
  }
}
function mergeRecords(values, utils, meta) {
  const result = utils.mergeFunctions.mergeRecords(values, utils, meta);
  if (result === actions.defaultMerge || utils.useImplicitDefaultMerging && result === void 0 && utils.mergeFunctions.mergeRecords !== utils.defaultMergeFunctions.mergeRecords) {
    return utils.defaultMergeFunctions.mergeRecords(values, utils, meta);
  }
  return result;
}
function mergeArrays(values, utils, meta) {
  const result = utils.mergeFunctions.mergeArrays(values, utils, meta);
  if (result === actions.defaultMerge || utils.useImplicitDefaultMerging && result === void 0 && utils.mergeFunctions.mergeArrays !== utils.defaultMergeFunctions.mergeArrays) {
    return utils.defaultMergeFunctions.mergeArrays(values);
  }
  return result;
}
function mergeSets(values, utils, meta) {
  const result = utils.mergeFunctions.mergeSets(values, utils, meta);
  if (result === actions.defaultMerge || utils.useImplicitDefaultMerging && result === void 0 && utils.mergeFunctions.mergeSets !== utils.defaultMergeFunctions.mergeSets) {
    return utils.defaultMergeFunctions.mergeSets(values);
  }
  return result;
}
function mergeMaps(values, utils, meta) {
  const result = utils.mergeFunctions.mergeMaps(values, utils, meta);
  if (result === actions.defaultMerge || utils.useImplicitDefaultMerging && result === void 0 && utils.mergeFunctions.mergeMaps !== utils.defaultMergeFunctions.mergeMaps) {
    return utils.defaultMergeFunctions.mergeMaps(values);
  }
  return result;
}
function mergeOthers(values, utils, meta) {
  const result = utils.mergeFunctions.mergeOthers(values, utils, meta);
  if (result === actions.defaultMerge || utils.useImplicitDefaultMerging && result === void 0 && utils.mergeFunctions.mergeOthers !== utils.defaultMergeFunctions.mergeOthers) {
    return utils.defaultMergeFunctions.mergeOthers(values);
  }
  return result;
}
function defaultMergeRecords(values, utils, meta) {
  const result = {};
  for (const key of getKeys(values)) {
    const propValues = [];
    for (const value of values) {
      if (objectHasProperty(value, key)) {
        propValues.push(value[key]);
      }
    }
    if (propValues.length === 0) {
      continue;
    }
    const updatedMeta = utils.metaDataUpdater(meta, {
      key,
      parents: values
    });
    const propertyResult = mergeUnknowns(propValues, utils, updatedMeta);
    if (propertyResult === actions.skip) {
      continue;
    }
    if (key === "__proto__") {
      Object.defineProperty(result, key, {
        value: propertyResult,
        configurable: true,
        enumerable: true,
        writable: true
      });
    } else {
      result[key] = propertyResult;
    }
  }
  return result;
}
function defaultMergeArrays(values) {
  return values.flat();
}
function defaultMergeSets(values) {
  return new Set(getIterableOfIterables(values));
}
function defaultMergeMaps(values) {
  return new Map(getIterableOfIterables(values));
}
function leaf(values) {
  return values[values.length - 1];
}

// node_modules/@gilbarbara/react-range-slider/esm/utils.js
var __read = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e2;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e2 = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e2)
        throw e2.error;
    }
  }
  return ar;
};
var __spreadArray = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
function getBaseProps(props) {
  var _a, _b, _c, _d, _e, _f, _g;
  return {
    axis: (_a = props === null || props === void 0 ? void 0 : props.axis) !== null && _a !== void 0 ? _a : "x",
    xMax: (_b = props === null || props === void 0 ? void 0 : props.xMax) !== null && _b !== void 0 ? _b : 100,
    xMin: (_c = props === null || props === void 0 ? void 0 : props.xMin) !== null && _c !== void 0 ? _c : 0,
    xStep: (_d = props === null || props === void 0 ? void 0 : props.xStep) !== null && _d !== void 0 ? _d : 1,
    yMax: (_e = props === null || props === void 0 ? void 0 : props.yMax) !== null && _e !== void 0 ? _e : 100,
    yMin: (_f = props === null || props === void 0 ? void 0 : props.yMin) !== null && _f !== void 0 ? _f : 0,
    yStep: (_g = props === null || props === void 0 ? void 0 : props.yStep) !== null && _g !== void 0 ? _g : 1
  };
}
function getCoordinates(event, lastPosition) {
  if ("touches" in event) {
    var _a = __read(__spreadArray([], __read(Array.from(event.touches)), false), 1), touch = _a[0];
    return {
      x: touch ? touch.clientX : lastPosition.x,
      y: touch ? touch.clientY : lastPosition.y
    };
  }
  return {
    x: event.clientX,
    y: event.clientY
  };
}
function getPosition(position, props, el) {
  var _a = getBaseProps(props), axis = _a.axis, xMax = _a.xMax, xMin = _a.xMin, xStep = _a.xStep, yMax = _a.yMax, yMin = _a.yMin, yStep = _a.yStep;
  var _b = (el === null || el === void 0 ? void 0 : el.getBoundingClientRect()) || {}, _c = _b.height, height = _c === void 0 ? xMax : _c, _d = _b.width, width = _d === void 0 ? yMax : _d;
  var x = position.x, y = position.y;
  var dx = 0;
  var dy = 0;
  if (x < 0) {
    x = 0;
  }
  if (x > width) {
    x = width;
  }
  if (y < 0) {
    y = 0;
  }
  if (y > height) {
    y = height;
  }
  if (axis === "x" || axis === "xy") {
    dx = Math.round(x / width * (xMax - xMin));
  }
  if (axis === "y" || axis === "xy") {
    dy = Math.round(y / height * (yMax - yMin));
  }
  return {
    x: round(dx, xStep),
    y: round(dy, yStep)
  };
}
function getNormalizedValue(name, props) {
  var value = props[name] || 0;
  var min = name === "x" ? props.xMin : props.yMin;
  var max = name === "x" ? props.xMax : props.yMax;
  if (isNumber(min) && value < min) {
    return min;
  }
  if (isNumber(max) && value > max) {
    return max;
  }
  return value;
}
function isNumber(value) {
  return typeof value === "number";
}
function isUndefined2(value) {
  return typeof value === "undefined";
}
function parseNumber(value) {
  if (typeof value === "number") {
    return value;
  }
  return parseInt(value, 10);
}
function removeProperties(input) {
  var filter = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    filter[_i - 1] = arguments[_i];
  }
  var output = {};
  for (var key in input) {
    if ({}.hasOwnProperty.call(input, key)) {
      if (!filter.includes(key)) {
        output[key] = input[key];
      }
    }
  }
  return output;
}
function round(value, increment) {
  return Math.ceil(value / increment) * increment;
}

// node_modules/@gilbarbara/react-range-slider/esm/styles.js
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var defaultOptions = {
  height: "20px",
  padding: "6px",
  rangeColor: "#007bff",
  thumbBorder: "2px solid #000",
  thumbBorderRadius: "4px",
  thumbBorderRadiusXY: "50%",
  thumbColor: "#fff",
  thumbSize: "10px",
  thumbSizeXY: "20px",
  thumbSpace: "6px",
  trackBorderRadius: "3px",
  trackColor: "#ccc",
  width: "20px"
};
function getStyles(styles) {
  var options = deepmerge(defaultOptions, styles ? styles.options : {});
  var slider = {
    boxSizing: "border-box",
    display: "inline-block",
    padding: options.padding,
    transition: "height 0.4s, width 0.4s"
  };
  var track = {
    backgroundColor: options.trackColor,
    borderRadius: options.trackBorderRadius,
    boxSizing: "border-box",
    height: "100%",
    position: "relative",
    width: "100%"
  };
  var range = {
    backgroundColor: options.rangeColor,
    borderRadius: options.trackBorderRadius,
    position: "absolute"
  };
  var rail = {
    boxSizing: "border-box",
    height: options.height,
    position: "absolute",
    transition: "height 0.4s, width 0.4s",
    width: options.width
  };
  var thumb = {
    backgroundColor: options.thumbColor,
    border: options.thumbBorder,
    borderRadius: options.thumbBorderRadius,
    boxSizing: "border-box",
    display: "block",
    position: "absolute",
    transition: "height 0.4s, width 0.4s"
  };
  var defaultStyles = {
    rail,
    rangeX: __assign2(__assign2({}, range), { height: "100%", top: 0 }),
    rangeXY: __assign2(__assign2({}, range), { bottom: 0 }),
    rangeY: __assign2(__assign2({}, range), { bottom: 0, left: 0, width: "100%" }),
    sliderX: __assign2(__assign2({}, slider), { height: parseNumber(options.height) + parseNumber(options.padding) * 2, width: "100%" }),
    sliderXY: __assign2(__assign2({}, slider), { height: "100%", width: "100%" }),
    sliderY: __assign2(__assign2({}, slider), { height: "100%", width: parseNumber(options.width) + parseNumber(options.padding) * 2 }),
    thumbX: __assign2(__assign2({}, thumb), { height: parseNumber(options.height) + parseNumber(options.thumbSpace), left: -(parseNumber(options.thumbSize) / 2), top: -(parseNumber(options.thumbSpace) / 2), width: options.thumbSize }),
    thumbXY: __assign2(__assign2({}, thumb), { backgroundColor: "transparent", border: options.thumbBorder, borderRadius: options.thumbBorderRadiusXY, bottom: -(parseNumber(options.thumbSizeXY) / 2), height: options.thumbSizeXY, left: -(parseNumber(options.thumbSizeXY) / 2), position: "absolute", width: options.thumbSizeXY }),
    thumbY: __assign2(__assign2({}, thumb), { bottom: -(parseNumber(options.thumbSize) / 2), height: options.thumbSize, left: -(parseNumber(options.thumbSpace) / 2), width: parseNumber(options.width) + parseNumber(options.thumbSpace) }),
    trackX: __assign2(__assign2({}, track), { height: options.height }),
    trackXY: __assign2(__assign2({}, track), { height: "100%", minHeight: "50px", width: "100%" }),
    trackY: __assign2(__assign2({}, track), { height: "100%", minHeight: "50px", width: options.width })
  };
  return deepmerge(defaultStyles, styles || {});
}

// node_modules/@gilbarbara/react-range-slider/esm/index.js
var __extends = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign3 = function() {
  __assign3 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
var RangeSlider = (
  /** @class */
  function(_super) {
    __extends(RangeSlider2, _super);
    function RangeSlider2(props) {
      var _this = _super.call(this, props) || this;
      _this.lastCoordinates = { x: 0, y: 0 };
      _this.mounted = false;
      _this.offset = { x: 0, y: 0 };
      _this.start = { x: 0, y: 0 };
      _this.getDragPosition = function(_a) {
        var x = _a.x, y = _a.y;
        return {
          x: x + _this.start.x - _this.offset.x,
          y: _this.offset.y + _this.start.y - y
        };
      };
      _this.updateOptions = function(_a) {
        var _b, _c, _d, _e, _f, _g, _h, _j;
        var x = _a.x, y = _a.y;
        var _k = _this, rail = _k.rail, track = _k.track;
        _this.start = {
          x: (_c = (_b = rail.current) === null || _b === void 0 ? void 0 : _b.offsetLeft) !== null && _c !== void 0 ? _c : 0,
          y: ((_e = (_d = track.current) === null || _d === void 0 ? void 0 : _d.offsetHeight) !== null && _e !== void 0 ? _e : 0) - ((_g = (_f = rail.current) === null || _f === void 0 ? void 0 : _f.offsetTop) !== null && _g !== void 0 ? _g : 0) - ((_j = (_h = rail.current) === null || _h === void 0 ? void 0 : _h.offsetHeight) !== null && _j !== void 0 ? _j : 0)
        };
        _this.lastCoordinates = { x, y };
        _this.offset = { x, y };
      };
      _this.updatePosition = function(position) {
        _this.setState(getPosition(position, _this.props, _this.slider.current));
      };
      _this.handleBlur = function() {
        document.removeEventListener("keydown", _this.handleKeydown);
      };
      _this.handleClickTrack = function(event) {
        var onAfterEnd = _this.props.onAfterEnd;
        var isDragging = _this.state.isDragging;
        if (!isDragging) {
          var element = event.currentTarget;
          var _a = getCoordinates(event, _this.lastCoordinates), x = _a.x, y = _a.y;
          var _b = element.getBoundingClientRect(), bottom = _b.bottom, left = _b.left;
          var nextPosition = {
            x: x - left,
            y: bottom - y
          };
          _this.lastCoordinates = { x, y };
          _this.updatePosition(nextPosition);
          if (onAfterEnd) {
            onAfterEnd(getPosition(nextPosition, _this.props, _this.slider.current), _this.props);
          }
        } else if (_this.mounted) {
          _this.setState({ isDragging: false });
        }
      };
      _this.handleDrag = function(event) {
        event.preventDefault();
        var coordinates = getCoordinates(event, _this.lastCoordinates);
        _this.updatePosition(_this.getDragPosition(coordinates));
        _this.lastCoordinates = coordinates;
      };
      _this.handleDragEnd = function(event) {
        event.preventDefault();
        var _a = _this.props, onAfterEnd = _a.onAfterEnd, onDragEnd = _a.onDragEnd;
        var position = getPosition(_this.getDragPosition(getCoordinates(event, _this.lastCoordinates)), _this.props, _this.slider.current);
        document.removeEventListener("mousemove", _this.handleDrag);
        document.removeEventListener("mouseup", _this.handleDragEnd);
        document.removeEventListener("touchmove", _this.handleDrag);
        document.removeEventListener("touchend", _this.handleDragEnd);
        document.removeEventListener("touchcancel", _this.handleDragEnd);
        if (onDragEnd) {
          onDragEnd(position, _this.props);
        }
        if (onAfterEnd) {
          onAfterEnd(position, _this.props);
        }
      };
      _this.handleFocus = function() {
        document.addEventListener("keydown", _this.handleKeydown, { passive: false });
      };
      _this.handleKeydown = function(event) {
        var _a = _this.state, innerX = _a.x, innerY = _a.y;
        var _b = _this.props, x = _b.x, y = _b.y;
        var _c = getBaseProps(_this.props), axis = _c.axis, xMax = _c.xMax, xMin = _c.xMin, xStep = _c.xStep, yMax = _c.yMax, yMin = _c.yMin, yStep = _c.yStep;
        var codes = { down: "ArrowDown", left: "ArrowLeft", up: "ArrowUp", right: "ArrowRight" };
        if (Object.values(codes).includes(event.code)) {
          event.preventDefault();
          var position = {
            x: isUndefined2(x) ? innerX : getNormalizedValue("x", _this.props),
            y: isUndefined2(y) ? innerY : getNormalizedValue("y", _this.props)
          };
          var xMinus = position.x - xStep <= xMin ? xMin : position.x - xStep;
          var xPlus = position.x + xStep >= xMax ? xMax : position.x + xStep;
          var yMinus = position.y - yStep <= yMin ? yMin : position.y - yStep;
          var yPlus = position.y + yStep >= yMax ? yMax : position.y + yStep;
          switch (event.code) {
            case codes.up: {
              if (axis === "x") {
                position.x = xPlus;
              } else {
                position.y = yPlus;
              }
              break;
            }
            case codes.down: {
              if (axis === "x") {
                position.x = xMinus;
              } else {
                position.y = yMinus;
              }
              break;
            }
            case codes.left: {
              if (axis === "y") {
                position.y = yMinus;
              } else {
                position.x = xMinus;
              }
              break;
            }
            case codes.right:
            default: {
              if (axis === "y") {
                position.y = yPlus;
              } else {
                position.x = xPlus;
              }
              break;
            }
          }
          _this.setState(position);
        }
      };
      _this.handleMouseDown = function(event) {
        event.preventDefault();
        _this.updateOptions(getCoordinates(event, _this.lastCoordinates));
        _this.setState({ isDragging: true });
        document.addEventListener("mousemove", _this.handleDrag);
        document.addEventListener("mouseup", _this.handleDragEnd);
      };
      _this.handleTouchStart = function(event) {
        event.preventDefault();
        _this.updateOptions(getCoordinates(event, _this.lastCoordinates));
        document.addEventListener("touchmove", _this.handleDrag, { passive: false });
        document.addEventListener("touchend", _this.handleDragEnd, { passive: false });
        document.addEventListener("touchcancel", _this.handleDragEnd, { passive: false });
      };
      _this.slider = React4.createRef();
      _this.rail = React4.createRef();
      _this.track = React4.createRef();
      _this.state = {
        isDragging: false,
        x: getNormalizedValue("x", props),
        y: getNormalizedValue("y", props)
      };
      return _this;
    }
    RangeSlider2.prototype.componentDidMount = function() {
      this.mounted = true;
    };
    RangeSlider2.prototype.componentDidUpdate = function(_, previousState) {
      var _a = this.state, x = _a.x, y = _a.y;
      var onChange = this.props.onChange;
      var previousX = previousState.x, previousY = previousState.y;
      if (onChange && (x !== previousX || y !== previousY)) {
        onChange({ x, y }, this.props);
      }
    };
    RangeSlider2.prototype.componentWillUnmount = function() {
      this.mounted = false;
    };
    Object.defineProperty(RangeSlider2.prototype, "position", {
      get: function() {
        var _a = getBaseProps(this.props), axis = _a.axis, xMax = _a.xMax, xMin = _a.xMin, yMax = _a.yMax, yMin = _a.yMin;
        var bottom = (this.y - yMin) / (yMax - yMin) * 100;
        var left = (this.x - xMin) / (xMax - xMin) * 100;
        if (bottom > 100) {
          bottom = 100;
        }
        if (bottom < 0) {
          bottom = 0;
        }
        if (axis === "x") {
          bottom = 0;
        }
        if (left > 100) {
          left = 100;
        }
        if (left < 0) {
          left = 0;
        }
        if (axis === "y") {
          left = 0;
        }
        return { x: left, y: bottom };
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(RangeSlider2.prototype, "styles", {
      get: function() {
        var styles = this.props.styles;
        return getStyles(styles);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(RangeSlider2.prototype, "x", {
      get: function() {
        var innerX = this.state.x;
        var x = this.props.x;
        return isUndefined2(x) ? innerX : x;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(RangeSlider2.prototype, "y", {
      get: function() {
        var innerY = this.state.y;
        var y = this.props.y;
        return isUndefined2(y) ? innerY : y;
      },
      enumerable: false,
      configurable: true
    });
    RangeSlider2.prototype.render = function() {
      var _a = this.props, axis = _a.axis, className = _a.className, xMax = _a.xMax, xMin = _a.xMin, yMax = _a.yMax, yMin = _a.yMin;
      var rest = removeProperties(this.props, "axis", "className", "onAfterEnd", "onChange", "onDragEnd", "styles", "x", "xMin", "xMax", "xStep", "y", "yMin", "yMax", "yStep");
      var _b = this.position, xPos = _b.x, yPos = _b.y;
      var position = { left: "".concat(xPos, "%"), bottom: "".concat(yPos, "%") };
      var size = {};
      var orientation;
      var range;
      var slider;
      var thumb;
      var track;
      var valuemax = xMax;
      var valuemin = xMin;
      var valuenow = this.x;
      if (axis === "x") {
        size.width = "".concat(xPos, "%");
        slider = this.styles.sliderX;
        orientation = "horizontal";
        range = this.styles.rangeX;
        track = this.styles.trackX;
        thumb = this.styles.thumbX;
      }
      if (axis === "y") {
        size.height = "".concat(yPos, "%");
        slider = this.styles.sliderY;
        range = this.styles.rangeY;
        track = this.styles.trackY;
        thumb = this.styles.thumbY;
        orientation = "vertical";
        valuemax = yMax;
        valuemin = yMin;
        valuenow = this.y;
      }
      if (axis === "xy") {
        size.height = "".concat(yPos, "%");
        size.width = "".concat(xPos, "%");
        slider = this.styles.sliderXY;
        range = this.styles.rangeXY;
        track = this.styles.trackXY;
        thumb = this.styles.thumbXY;
      }
      return React4.createElement(
        "div",
        __assign3({ ref: this.slider, className, style: slider }, rest),
        React4.createElement(
          "div",
          {
            ref: this.track,
            className: className && "".concat(className, "__track"),
            onClick: this.handleClickTrack,
            role: "presentation",
            // @ts-ignore We can't use React's events because the listeners
            style: track
          },
          React4.createElement("div", { className: className && "".concat(className, "__range"), style: __assign3(__assign3({}, size), range) }),
          React4.createElement(
            "div",
            {
              ref: this.rail,
              onMouseDown: this.handleMouseDown,
              onTouchStart: this.handleTouchStart,
              // @ts-ignore We can't use React's events because the listeners
              role: "presentation",
              // @ts-ignore We can't use React's events because the listeners
              style: __assign3(__assign3({}, this.styles.rail), position)
            },
            React4.createElement("span", { "aria-label": "slider handle", "aria-orientation": orientation, "aria-valuemax": valuemax, "aria-valuemin": valuemin, "aria-valuenow": valuenow, className: className && "".concat(className, "__thumb"), onBlur: this.handleBlur, onFocus: this.handleFocus, role: "slider", style: thumb, tabIndex: 0 })
          )
        )
      );
    };
    RangeSlider2.defaultProps = getBaseProps();
    return RangeSlider2;
  }(React4.Component)
);
var esm_default = RangeSlider;

// node_modules/react-spotify-web-playback/dist/index.mjs
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime13 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime14 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime15 = __toESM(require_jsx_runtime(), 1);
var import_react105 = __toESM(require_react(), 1);
var import_jsx_runtime16 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime17 = __toESM(require_jsx_runtime(), 1);
var import_exenv = __toESM(require_exenv(), 1);
var import_jsx_runtime18 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime19 = __toESM(require_jsx_runtime(), 1);
var import_react106 = __toESM(require_react(), 1);
var import_jsx_runtime20 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime21 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime22 = __toESM(require_jsx_runtime(), 1);
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
function ClickOutside({ children, onClick, ...rest }) {
  const containerRef = (0, import_react102.useRef)(null);
  const isTouchRef = (0, import_react102.useRef)(false);
  const handleClick = (0, import_react102.useCallback)(
    (event) => {
      if (event.type === "touchend") {
        isTouchRef.current = true;
      }
      if (event.type === "click" && isTouchRef.current) {
        return;
      }
      const el = containerRef.current;
      if (el && !el.contains(event.target)) {
        onClick();
      }
    },
    [onClick]
  );
  (0, import_react102.useEffect)(() => {
    document.addEventListener("touchend", handleClick, true);
    document.addEventListener("click", handleClick, true);
    return () => {
      document.removeEventListener("touchend", handleClick, true);
      document.removeEventListener("click", handleClick, true);
    };
  });
  return (0, import_jsx_runtime.jsx)("div", { ...rest, ref: containerRef, children });
}
function DevicesIcon(props) {
  return (0, import_jsx_runtime2.jsx)("svg", { height: "1em", preserveAspectRatio: "xMidYMid", viewBox: "0 0 128 128", width: "1em", ...props, children: (0, import_jsx_runtime2.jsx)(
    "path",
    {
      d: "M6.765 89.483h40.412v6.765H6.269C2.765 96.248 0 93.483 0 89.978V20.703c0-3.504 2.765-6.27 6.27-6.27h40.907v6.766H6.765v68.285zm16.327 20.702a3.4 3.4 0 0 1 3.383-3.383h20.702v6.765H26.475c-.915 0-1.72-.347-2.344-1.038a3.064 3.064 0 0 1-1.039-2.344zm46.681-95.752h51.958c3.504 0 6.269 2.765 6.269 6.269v86.596c0 3.504-2.765 6.27-6.27 6.27H69.774c-3.504 0-6.27-2.766-6.27-6.27V20.702c0-3.504 2.766-6.27 6.27-6.27zm-.496 5.842l.07 87.52 52.88-.07-.07-87.45h-52.88zm13.89 45.573c3.464-3.462 7.714-5.23 12.585-5.23 9.827 0 17.815 7.988 17.815 17.815 0 9.827-7.988 17.815-17.815 17.815-9.827 0-17.815-7.988-17.815-17.815 0-4.87 1.768-9.122 5.23-12.585zm4.124 21.045c2.381 2.381 5.195 3.582 8.46 3.582 6.598 0 12.043-5.445 12.043-12.042 0-6.597-5.445-12.043-12.042-12.043-6.597 0-12.042 5.446-12.042 12.043 0 3.266 1.2 6.08 3.581 8.46zm12.935-44.466c-1.247 1.247-2.741 1.863-4.474 1.863-3.504 0-6.27-2.765-6.27-6.269s2.766-6.27 6.27-6.27c3.504 0 6.27 2.766 6.27 6.27 0 1.72-.608 3.218-1.796 4.406z",
      fill: "currentColor"
    }
  ) });
}
var nano2 = (0, import_nano_css2.create)({ h: import_react103.createElement });
(0, import_rule.addon)(nano2);
(0, import_keyframes.addon)(nano2);
(0, import_jsx.addon)(nano2);
(0, import_style.addon)(nano2);
(0, import_styled.addon)(nano2);
(0, import_nesting.addon)(nano2);
var { keyframes, put, styled } = nano2;
var px = (value) => typeof value === "number" ? `${value}px` : value;
function getMergedStyles(styles) {
  return {
    activeColor: "#1cb954",
    altColor: "#ccc",
    bgColor: "#fff",
    color: "#333",
    errorColor: "#a60000",
    height: 48,
    loaderColor: "#ccc",
    loaderSize: 32,
    sliderColor: "#666",
    sliderHandleBorderRadius: "50%",
    sliderHandleColor: "#000",
    sliderHeight: 4,
    sliderTrackBorderRadius: 0,
    sliderTrackColor: "#ccc",
    trackArtistColor: "#666",
    trackNameColor: "#333",
    ...styles
  };
}
var Wrapper = styled("div")(
  {
    "pointer-events": "all",
    position: "relative",
    zIndex: 20,
    "> div": {
      display: "flex",
      flexDirection: "column",
      padding: px(8),
      position: "absolute",
      right: `-${px(3)}`,
      button: {
        display: "block",
        padding: px(8),
        whiteSpace: "nowrap",
        "&.rswp__devices__active": {
          fontWeight: "bold"
        }
      }
    },
    "> button": {
      fontSize: px(26)
    }
  },
  ({ style }) => ({
    "> button": {
      color: style.c
    },
    "> div": {
      backgroundColor: style.bgColor,
      boxShadow: style.altColor ? `1px 1px 10px ${style.altColor}` : "none",
      [style.p]: "120%",
      button: {
        color: style.c
      }
    }
  }),
  "DevicesRSWP"
);
function Devices(props) {
  const {
    currentDeviceId,
    deviceId,
    devices,
    onClickDevice,
    open,
    playerPosition,
    styles: { activeColor, altColor, bgColor, color },
    title
  } = props;
  const [isOpen, setOpen] = (0, import_react101.useState)(open);
  const handleClickSetDevice = (event) => {
    const { dataset } = event.currentTarget;
    if (dataset.id) {
      onClickDevice(dataset.id);
      setOpen(false);
    }
  };
  const handleClickToggleDevices = () => {
    setOpen((s) => !s);
  };
  return (0, import_jsx_runtime3.jsx)(
    Wrapper,
    {
      "data-component-name": "Devices",
      "data-device-id": currentDeviceId,
      style: {
        altColor,
        bgColor,
        c: currentDeviceId && deviceId && currentDeviceId !== deviceId ? activeColor : color,
        p: playerPosition
      },
      children: !!devices.length && (0, import_jsx_runtime3.jsxs)(import_jsx_runtime3.Fragment, { children: [
        isOpen && (0, import_jsx_runtime3.jsx)(ClickOutside, { onClick: handleClickToggleDevices, children: devices.map((d) => (0, import_jsx_runtime3.jsx)(
          "button",
          {
            "aria-label": d.name,
            className: d.id === currentDeviceId ? "rswp__devices__active" : void 0,
            "data-id": d.id,
            onClick: handleClickSetDevice,
            type: "button",
            children: d.name
          },
          d.id
        )) }),
        (0, import_jsx_runtime3.jsx)("button", { "aria-label": title, onClick: handleClickToggleDevices, title, type: "button", children: (0, import_jsx_runtime3.jsx)(DevicesIcon, {}) })
      ] })
    }
  );
}
function VolumeHigh(props) {
  return (0, import_jsx_runtime4.jsx)(
    "svg",
    {
      "data-component-name": "VolumeHigh",
      height: "1em",
      preserveAspectRatio: "xMidYMid",
      viewBox: "0 0 128 128",
      width: "1em",
      ...props,
      children: (0, import_jsx_runtime4.jsx)(
        "path",
        {
          d: "M0 85.869V40.38h21.24l39.41-22.743v90.974L21.24 85.87H0zm53.069 9.627V30.754L23.285 47.963H7.581v30.324h15.704L53.07 95.496zM92.355 18.86l4.889-5.723c13.772 12.64 21.94 30.407 21.94 49.724 0 19.318-8.168 37.085-21.94 49.725l-4.89-5.724c12.104-11.208 19.318-26.89 19.318-44 0-17.112-7.214-32.793-19.317-44.002zM75.303 38.835l4.889-5.724c5.246 5.008 9.062 11.209 11.149 18.542a41.69 41.69 0 0 1 1.55 11.21c0 11.506-4.77 22.12-12.7 29.75l-4.888-5.723c6.26-6.26 10.076-14.786 10.076-24.028 0-9.241-3.697-17.767-10.076-24.027z",
          fill: "currentColor"
        }
      )
    }
  );
}
function VolumeLow(props) {
  return (0, import_jsx_runtime5.jsx)(
    "svg",
    {
      "data-component-name": "VolumeLow",
      height: "1em",
      preserveAspectRatio: "xMidYMid",
      viewBox: "0 0 128 128",
      width: "1em",
      ...props,
      children: (0, import_jsx_runtime5.jsx)(
        "path",
        {
          d: "M0 85.606V40.12h21.24l39.41-22.744v90.975L21.24 85.606H0zm53.069 9.627V30.492L23.285 47.7H7.581v30.325h15.704L53.07 95.233zm22.234-56.66l4.889-5.725c5.246 5.009 9.062 11.21 11.149 18.543a41.69 41.69 0 0 1 1.55 11.209c0 11.507-4.77 22.12-12.7 29.751l-4.888-5.724c6.26-6.26 10.076-14.786 10.076-24.027 0-9.242-3.697-17.768-10.076-24.028z",
          fill: "currentColor"
        }
      )
    }
  );
}
function VolumeMute(props) {
  return (0, import_jsx_runtime6.jsx)(
    "svg",
    {
      "data-component-name": "VolumeMute",
      height: "1em",
      preserveAspectRatio: "xMidYMid",
      viewBox: "0 0 128 128",
      width: "1em",
      ...props,
      children: (0, import_jsx_runtime6.jsx)(
        "path",
        {
          d: "M127.993 83.387l-5.278 5.279-20.53-20.559L81.62 88.672l-5.233-5.292 20.55-20.522L76.38 42.3l5.248-5.248 20.557 20.558 20.522-20.551L128 42.293l-20.565 20.565 20.558 20.53zM0 85.607V40.118h21.24l39.41-22.744v90.975L21.24 85.606H0zm53.069 9.626V30.492L23.285 47.7H7.581v30.325h15.704L53.07 95.233z",
          fill: "currentColor"
        }
      )
    }
  );
}
var Wrapper2 = styled("div")(
  {
    "pointer-events": "all",
    position: "relative",
    zIndex: 20,
    "> div": {
      display: "flex",
      flexDirection: "column",
      padding: px(12),
      position: "absolute",
      right: `-${px(3)}`
    },
    "> button": {
      fontSize: px(26)
    },
    "@media (max-width: 1023px)": {
      display: "none"
    }
  },
  ({ style }) => ({
    "> button": {
      color: style.c
    },
    "> div": {
      backgroundColor: style.bgColor,
      boxShadow: style.altColor ? `1px 1px 10px ${style.altColor}` : "none",
      [style.p]: "120%"
    }
  }),
  "VolumeRSWP"
);
function Volume(props) {
  const {
    playerPosition,
    setVolume: setVolume2,
    styles: { altColor, bgColor, color },
    title,
    volume
  } = props;
  const [isOpen, setIsOpen] = (0, import_react104.useState)(false);
  const [volumeState, setVolumeState] = (0, import_react104.useState)(volume);
  const timeoutRef = (0, import_react104.useRef)();
  const previousVolume = usePrevious(volume);
  (0, import_react104.useEffect)(() => {
    if (previousVolume !== volume && volume !== volumeState) {
      setVolumeState(volume);
    }
  }, [previousVolume, volume, volumeState]);
  const handleClick = () => {
    setIsOpen((s) => !s);
  };
  const handleChangeSlider = ({ y }) => {
    const currentvolume = Math.round(y) / 100;
    clearTimeout(timeoutRef.current);
    timeoutRef.current = window.setTimeout(() => {
      setVolume2(currentvolume);
    }, 250);
    setVolumeState(currentvolume);
  };
  const handleAfterEnd = () => {
    setTimeout(() => {
      setIsOpen(false);
    }, 100);
  };
  let icon = (0, import_jsx_runtime7.jsx)(VolumeHigh, {});
  if (volume === 0) {
    icon = (0, import_jsx_runtime7.jsx)(VolumeMute, {});
  } else if (volume <= 0.5) {
    icon = (0, import_jsx_runtime7.jsx)(VolumeLow, {});
  }
  return (0, import_jsx_runtime7.jsxs)(
    Wrapper2,
    {
      "data-component-name": "Volume",
      "data-value": volume,
      style: { altColor, bgColor, c: color, p: playerPosition },
      children: [
        isOpen && (0, import_jsx_runtime7.jsx)(ClickOutside, { onClick: handleClick, children: (0, import_jsx_runtime7.jsx)(
          esm_default,
          {
            axis: "y",
            className: "volume",
            onAfterEnd: handleAfterEnd,
            onChange: handleChangeSlider,
            styles: {
              options: {
                thumbBorder: `2px solid ${color}`,
                thumbBorderRadius: 12,
                thumbColor: bgColor,
                thumbSize: 12,
                padding: 0,
                rangeColor: altColor || "#ccc",
                trackColor: color,
                width: 6
              }
            },
            y: volume * 100,
            yMax: 100,
            yMin: 0
          }
        ) }),
        (0, import_jsx_runtime7.jsx)(
          "button",
          {
            "aria-label": title,
            onClick: !isOpen ? handleClick : void 0,
            title,
            type: "button",
            children: icon
          }
        )
      ]
    }
  );
}
var Wrapper3 = styled("div")(
  {
    alignItems: "center",
    display: "flex",
    justifyContent: "flex-end",
    paddingRight: px(10),
    "pointer-events": "none",
    "> div + div": {
      marginLeft: px(10)
    },
    "@media (max-width: 1023px)": {
      bottom: 0,
      position: "absolute",
      right: 0,
      width: "auto"
    }
  },
  ({ style }) => ({
    height: px(style.h)
  }),
  "ActionsRSWP"
);
function Actions(props) {
  const {
    currentDeviceId,
    deviceId,
    devices,
    isDevicesOpen,
    locale,
    onClickDevice,
    playerPosition,
    setVolume: setVolume2,
    styles,
    volume
  } = props;
  return (0, import_jsx_runtime8.jsxs)(Wrapper3, { "data-component-name": "Actions", style: { h: styles.height }, children: [
    currentDeviceId && (0, import_jsx_runtime8.jsx)(
      Volume,
      {
        playerPosition,
        setVolume: setVolume2,
        styles,
        title: locale.volume,
        volume
      }
    ),
    (0, import_jsx_runtime8.jsx)(
      Devices,
      {
        currentDeviceId,
        deviceId,
        devices,
        onClickDevice,
        open: isDevicesOpen,
        playerPosition,
        styles,
        title: locale.devices
      }
    )
  ] });
}
var Wrapper4 = styled("div")(
  {
    alignItems: "center",
    display: "flex",
    flexDirection: "column",
    justifyContent: "center",
    position: "relative",
    "> *": {
      width: "100%",
      "@media (min-width: 1024px)": {
        width: "33.3333%"
      }
    },
    "@media (min-width: 1024px)": {
      flexDirection: "row"
    }
  },
  ({ style }) => ({
    minHeight: px(style.h)
  }),
  "ContentRSWP"
);
function Content({ children, styles }) {
  return (0, import_jsx_runtime9.jsx)(Wrapper4, { "data-component-name": "Content", style: { h: styles.height }, children });
}
function Next(props) {
  return (0, import_jsx_runtime10.jsx)("svg", { height: "1em", preserveAspectRatio: "xMidYMid", viewBox: "0 0 128 128", width: "1em", ...props, children: (0, import_jsx_runtime10.jsx)(
    "path",
    {
      d: "M98.91 53.749L5.817 0v128L98.91 74.251v47.93h23.273V5.819H98.909z",
      fill: "currentColor"
    }
  ) });
}
function Pause(props) {
  return (0, import_jsx_runtime11.jsx)("svg", { height: "1em", preserveAspectRatio: "xMidYMid", viewBox: "0 0 128 128", width: "1em", ...props, children: (0, import_jsx_runtime11.jsx)("path", { d: "M41.86 128V0H8.648v128h33.21zm77.491 0V0h-33.21v128h33.21z", fill: "currentColor" }) });
}
function Play(props) {
  return (0, import_jsx_runtime12.jsx)("svg", { height: "1em", preserveAspectRatio: "xMidYMid", viewBox: "0 0 128 128", width: "1em", ...props, children: (0, import_jsx_runtime12.jsx)("path", { d: "M119.351 64L8.65 0v128z", fill: "currentColor" }) });
}
function Previous(props) {
  return (0, import_jsx_runtime13.jsx)("svg", { height: "1em", preserveAspectRatio: "xMidYMid", viewBox: "0 0 128 128", width: "1em", ...props, children: (0, import_jsx_runtime13.jsx)("path", { d: "M29.09 53.749V5.819H5.819v116.363h23.273v-47.93L122.18 128V0z", fill: "currentColor" }) });
}
var Wrapper5 = styled("div")(
  {},
  ({ style }) => ({
    alignItems: "center",
    display: "flex",
    height: px(style.h),
    justifyContent: "center",
    "@media (max-width: 767px)": {
      padding: px(10)
    },
    "> div": {
      minWidth: px(style.h),
      textAlign: "center"
    },
    button: {
      alignItems: "center",
      color: style.c,
      display: "inline-flex",
      fontSize: px(16),
      height: px(48),
      justifyContent: "center",
      width: px(48),
      "&.rswp__toggle": {
        fontSize: px(28)
      }
    }
  }),
  "ControlsRSWP"
);
function Controls(props) {
  const {
    isExternalDevice,
    isPlaying,
    locale,
    nextTracks,
    onClickNext,
    onClickPrevious,
    onClickTogglePlay,
    previousTracks,
    styles: { color, height }
  } = props;
  return (0, import_jsx_runtime14.jsxs)(
    Wrapper5,
    {
      "data-component-name": "Controls",
      "data-playing": isPlaying,
      style: { c: color, h: height },
      children: [
        (0, import_jsx_runtime14.jsx)("div", { children: (!!previousTracks.length || isExternalDevice) && (0, import_jsx_runtime14.jsx)(
          "button",
          {
            "aria-label": locale.previous,
            onClick: onClickPrevious,
            title: locale.previous,
            type: "button",
            children: (0, import_jsx_runtime14.jsx)(Previous, {})
          }
        ) }),
        (0, import_jsx_runtime14.jsx)("div", { children: (0, import_jsx_runtime14.jsx)(
          "button",
          {
            "aria-label": isPlaying ? locale.pause : locale.play,
            className: "rswp__toggle",
            onClick: onClickTogglePlay,
            title: isPlaying ? locale.pause : locale.play,
            type: "button",
            children: isPlaying ? (0, import_jsx_runtime14.jsx)(Pause, {}) : (0, import_jsx_runtime14.jsx)(Play, {})
          }
        ) }),
        (0, import_jsx_runtime14.jsx)("div", { children: (!!nextTracks.length || isExternalDevice) && (0, import_jsx_runtime14.jsx)("button", { "aria-label": locale.next, onClick: onClickNext, title: locale.next, type: "button", children: (0, import_jsx_runtime14.jsx)(Next, {}) }) })
      ]
    }
  );
}
var Wrapper6 = styled("p")(
  {
    textAlign: "center",
    width: "100%"
  },
  ({ style }) => ({
    borderTop: `1px solid ${style.errorColor}`,
    color: style.errorColor,
    height: px(style.h),
    lineHeight: px(style.h)
  }),
  "ErrorRSWP"
);
function ErrorMessage({
  children,
  styles: { errorColor, height }
}) {
  return (0, import_jsx_runtime15.jsx)(Wrapper6, { "data-component-name": "ErrorMessage", style: { errorColor, h: height }, children });
}
function Favorite(props) {
  return (0, import_jsx_runtime16.jsx)("svg", { height: "1em", preserveAspectRatio: "xMidYMid", viewBox: "0 0 128 128", width: "1em", ...props, children: (0, import_jsx_runtime16.jsx)(
    "path",
    {
      d: "M117.686 16.288c-4.297-4.297-9.22-7.266-14.924-8.907-11.33-3.36-23.518-.86-32.582 6.72l-.781.546c-.938.703-3.282 1.641-5.392 1.641-2.187 0-4.688-1.172-5.313-1.64-.39-.235-.625-.391-.86-.548-9.063-7.579-21.252-10.08-32.582-6.72C13.922 10.74 4.39 19.96 1.187 32.072c-3.204 12.19.156 25.082 9.142 34.145L54.24 117.63c2.579 2.97 5.782 4.454 9.767 4.454 3.985 0 7.189-1.485 9.767-4.454l43.912-51.413C124.484 59.42 128 50.121 128 41.213c0-8.907-3.516-18.127-10.314-24.925z",
      fill: "currentColor"
    }
  ) });
}
function FavoriteOutline(props) {
  return (0, import_jsx_runtime17.jsx)("svg", { height: "1em", preserveAspectRatio: "xMidYMid", viewBox: "0 0 128 128", width: "1em", ...props, children: (0, import_jsx_runtime17.jsx)(
    "path",
    {
      d: "M126.772 51.913c-1.641 6.254-4.848 11.796-9.505 16.528l-41.524 48.612c-3.096 3.585-7.039 5.392-11.765 5.392-4.726 0-8.668-1.807-11.768-5.396L10.66 68.34C6.077 63.754 2.814 58.12 1.266 52.004.418 49 0 45.775 0 42.443 0 32.631 3.808 23.4 10.737 16.472 19.61 7.597 31.993 3.833 44.055 6.293c6.015 1.267 11.383 3.881 16.17 7.883a5.834 5.834 0 0 0 3.753 1.342c1.4 0 2.658-.459 3.674-1.339 9.686-7.953 22.313-10.577 34.105-7.094 5.884 1.828 11.005 4.928 15.463 9.387 9.322 9.322 12.893 22.716 9.552 35.44zm-14.428 12.012c7.721-7.721 10.73-18.85 8.013-29.263-3.259-12.157-13.877-21.773-27.765-22.377-7.712-.374-14.583 1.94-20.726 7.016-.334.223-.49.33-.73.511a11.431 11.431 0 0 1-4.092 1.923c-1.093.273-2.062.412-3.066.412-2.319 0-5.33-1.013-6.809-1.998-.37-.247-.701-.496-1.228-.902-5.627-4.652-11.977-6.96-19.156-6.96a30.137 30.137 0 0 0-21.323 8.825c-5.7 5.776-8.834 13.336-8.834 21.331 0 8.072 3.133 15.63 8.878 21.379l41.75 48.913c1.77 2.055 3.998 3.082 6.722 3.082s4.95-1.026 6.722-3.08l41.644-48.812z",
      fill: "currentColor"
    }
  ) });
}
async function checkTracksStatus(token, tracks) {
  const ids = Array.isArray(tracks) ? tracks : [tracks];
  return fetch(`https://api.spotify.com/v1/me/tracks/contains?ids=${ids}`, {
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json"
    },
    method: "GET"
  }).then((d) => d.json());
}
async function getDevices(token) {
  return fetch(`https://api.spotify.com/v1/me/player/devices`, {
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json"
    },
    method: "GET"
  }).then((d) => d.json());
}
async function getPlaybackState(token) {
  return fetch(`https://api.spotify.com/v1/me/player`, {
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json"
    },
    method: "GET"
  }).then((d) => {
    if (d.status === 204) {
      return null;
    }
    return d.json();
  });
}
async function pause(token) {
  return fetch(`https://api.spotify.com/v1/me/player/pause`, {
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json"
    },
    method: "PUT"
  });
}
async function play(token, { context_uri, deviceId, offset = 0, uris }) {
  let body;
  if (context_uri) {
    const isArtist = context_uri.indexOf("artist") >= 0;
    let position;
    if (!isArtist) {
      position = { position: offset };
    }
    body = JSON.stringify({ context_uri, offset: position });
  } else if (Array.isArray(uris) && uris.length) {
    body = JSON.stringify({ uris, offset: { position: offset } });
  }
  return fetch(`https://api.spotify.com/v1/me/player/play?device_id=${deviceId}`, {
    body,
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json"
    },
    method: "PUT"
  });
}
async function previous(token) {
  return fetch(`https://api.spotify.com/v1/me/player/previous`, {
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json"
    },
    method: "POST"
  });
}
async function next(token) {
  return fetch(`https://api.spotify.com/v1/me/player/next`, {
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json"
    },
    method: "POST"
  });
}
async function removeTracks(token, tracks) {
  const ids = Array.isArray(tracks) ? tracks : [tracks];
  return fetch(`https://api.spotify.com/v1/me/tracks`, {
    body: JSON.stringify(ids),
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json"
    },
    method: "DELETE"
  });
}
async function saveTracks(token, tracks) {
  const ids = Array.isArray(tracks) ? tracks : [tracks];
  return fetch(`https://api.spotify.com/v1/me/tracks`, {
    body: JSON.stringify({ ids }),
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json"
    },
    method: "PUT"
  });
}
async function seek(token, position) {
  return fetch(`https://api.spotify.com/v1/me/player/seek?position_ms=${position}`, {
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json"
    },
    method: "PUT"
  });
}
async function setDevice(token, deviceId, shouldPlay) {
  return fetch(`https://api.spotify.com/v1/me/player`, {
    body: JSON.stringify({ device_ids: [deviceId], play: shouldPlay }),
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json"
    },
    method: "PUT"
  });
}
async function setVolume(token, volume) {
  return fetch(`https://api.spotify.com/v1/me/player/volume?volume_percent=${volume}`, {
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json"
    },
    method: "PUT"
  });
}
var STATUS = {
  ERROR: "ERROR",
  IDLE: "IDLE",
  INITIALIZING: "INITIALIZING",
  READY: "READY",
  RUNNING: "RUNNING",
  UNSUPPORTED: "UNSUPPORTED"
};
var TYPE = {
  DEVICE: "device_update",
  FAVORITE: "favorite_update",
  PLAYER: "player_update",
  PROGRESS: "progress_update",
  STATUS: "status_update",
  TRACK: "track_update"
};
function getLocale(locale) {
  return {
    devices: "Devices",
    next: "Next",
    pause: "Pause",
    play: "Play",
    previous: "Previous",
    removeTrack: "Remove from your favorites",
    saveTrack: "Save to your favorites",
    title: "{name} on SPOTIFY",
    volume: "Volume",
    ...locale
  };
}
function getSpotifyLink(uri) {
  const [, type = "", id = ""] = uri.split(":");
  return `https://open.spotify.com/${type}/${id}`;
}
function getSpotifyLinkTitle(name, locale) {
  return locale.replace("{name}", name);
}
function getSpotifyURIType(uri) {
  const [, type = ""] = uri.split(":");
  return type;
}
function isNumber2(value) {
  return typeof value === "number";
}
function loadSpotifyPlayer() {
  return new Promise((resolve, reject) => {
    const scriptTag = document.getElementById("spotify-player");
    if (!scriptTag) {
      const script = document.createElement("script");
      script.id = "spotify-player";
      script.type = "text/javascript";
      script.async = false;
      script.defer = true;
      script.src = "https://sdk.scdn.co/spotify-player.js";
      script.onload = () => resolve();
      script.onerror = (error) => reject(new Error(`loadScript: ${error.message}`));
      document.head.appendChild(script);
    } else {
      resolve();
    }
  });
}
function parseVolume(value) {
  if (!isNumber2(value)) {
    return 1;
  }
  if (value > 1) {
    return value / 100;
  }
  return value;
}
function round2(number, digits = 2) {
  const factor = 10 ** digits;
  return Math.round(number * factor) / factor;
}
function validateURI(input) {
  const validTypes = ["album", "artist", "playlist", "show", "track"];
  if (input && input.indexOf(":") > -1) {
    const [key, type, id] = input.split(":");
    if (key === "spotify" && validTypes.indexOf(type) >= 0 && id.length === 22) {
      return true;
    }
  }
  return false;
}
var Wrapper7 = styled("div")(
  {
    alignItems: "center",
    display: "flex",
    textAlign: "left",
    a: {
      display: "inline-flex",
      textDecoration: "none"
    },
    "@media (max-width: 1023px)": {
      borderBottom: "1px solid #ccc",
      display: "none",
      width: "100%"
    },
    "&.rswp__active": {
      "@media (max-width: 1023px)": {
        display: "flex"
      }
    }
  },
  ({ style }) => ({
    height: px(style.h),
    img: {
      height: px(style.h),
      width: px(style.h)
    }
  }),
  "InfoRSWP"
);
var Title = styled("div")(
  {
    paddingLeft: px(10),
    whiteSpace: "nowrap",
    p: {
      fontSize: px(14),
      lineHeight: 1.3,
      paddingRight: px(5),
      overflow: "hidden",
      textOverflow: "ellipsis",
      whiteSpace: "nowrap",
      width: "100%",
      "&:first-child": {
        alignItems: "center",
        display: "inline-flex"
      }
    },
    span: {
      display: "inline-block",
      overflow: "hidden",
      textOverflow: "ellipsis"
    },
    button: {
      fontSize: "110%",
      marginLeft: px(5)
    }
  },
  ({ style }) => ({
    width: `calc(100% - ${px(style.h)})`,
    p: {
      a: {
        color: style.trackNameColor
      },
      "&:last-child": {
        a: {
          color: style.trackArtistColor
        }
      }
    },
    button: {
      color: style.c,
      "&.rswp__active": {
        color: style.activeColor
      }
    }
  })
);
function Info(props) {
  const {
    isActive,
    locale,
    onFavoriteStatusChange,
    showSaveIcon,
    styles: { activeColor, color, height, trackArtistColor, trackNameColor },
    token,
    track: { id, name, uri, image, artists = [] },
    updateSavedStatus
  } = props;
  const [isSaved, setIsSaved] = (0, import_react105.useState)(false);
  const isMounted = (0, import_react105.useRef)(false);
  const previousId = usePrevious(id);
  const updateState = (state) => {
    if (!isMounted.current) {
      return;
    }
    setIsSaved(state);
  };
  const setStatus = async () => {
    if (!isMounted.current) {
      return;
    }
    if (updateSavedStatus && id) {
      updateSavedStatus((newStatus) => {
        updateState(newStatus);
      });
    }
    const status = await checkTracksStatus(token, id);
    const [isFavorite] = status || [false];
    updateState(isFavorite);
    onFavoriteStatusChange(isSaved);
  };
  useMount_default(async () => {
    isMounted.current = true;
    if (showSaveIcon && id) {
      await setStatus();
    }
  });
  (0, import_react105.useEffect)(() => {
    if (showSaveIcon && previousId !== id && id) {
      updateState(false);
      setStatus();
    }
  });
  useUnmount_default(() => {
    isMounted.current = false;
  });
  const handleClickIcon = async () => {
    if (isSaved) {
      await removeTracks(token, id);
      updateState(false);
    } else {
      await saveTracks(token, id);
      updateState(true);
    }
    onFavoriteStatusChange(!isSaved);
  };
  const title = getSpotifyLinkTitle(name, locale.title);
  let icon;
  if (showSaveIcon && id) {
    icon = (0, import_jsx_runtime18.jsx)(
      "button",
      {
        "aria-label": isSaved ? locale.removeTrack : locale.saveTrack,
        className: isSaved ? "rswp__active" : void 0,
        onClick: handleClickIcon,
        title: isSaved ? locale.removeTrack : locale.saveTrack,
        type: "button",
        children: isSaved ? (0, import_jsx_runtime18.jsx)(Favorite, {}) : (0, import_jsx_runtime18.jsx)(FavoriteOutline, {})
      }
    );
  }
  const classes = [];
  if (isActive) {
    classes.push("rswp__active");
  }
  return (0, import_jsx_runtime18.jsxs)(Wrapper7, { className: classes.join(" "), "data-component-name": "Info", style: { h: height }, children: [
    image && (0, import_jsx_runtime18.jsx)(
      "a",
      {
        "aria-label": title,
        href: getSpotifyLink(uri),
        rel: "noreferrer",
        target: "_blank",
        title,
        children: (0, import_jsx_runtime18.jsx)("img", { alt: name, src: image })
      }
    ),
    !!name && (0, import_jsx_runtime18.jsxs)(Title, { style: { c: color, h: height, activeColor, trackArtistColor, trackNameColor }, children: [
      (0, import_jsx_runtime18.jsxs)("p", { children: [
        (0, import_jsx_runtime18.jsx)("span", { children: (0, import_jsx_runtime18.jsx)(
          "a",
          {
            "aria-label": title,
            href: getSpotifyLink(uri),
            rel: "noreferrer",
            target: "_blank",
            title,
            children: name
          }
        ) }),
        icon
      ] }),
      (0, import_jsx_runtime18.jsx)("p", { title: artists.map((d) => d.name).join(", "), children: artists.map((artist, index) => {
        const artistTitle = getSpotifyLinkTitle(artist.name, locale.title);
        return (0, import_jsx_runtime18.jsxs)("span", { children: [
          index ? ", " : "",
          (0, import_jsx_runtime18.jsx)(
            "a",
            {
              "aria-label": artistTitle,
              href: getSpotifyLink(artist.uri),
              rel: "noreferrer",
              target: "_blank",
              title: artistTitle,
              children: artist.name
            }
          )
        ] }, artist.uri);
      }) })
    ] })
  ] });
}
var Wrapper8 = styled("div")(
  {
    margin: "0 auto",
    position: "relative",
    "> div": {
      borderRadius: "50%",
      borderStyle: "solid",
      borderWidth: 0,
      boxSizing: "border-box",
      height: 0,
      left: "50%",
      position: "absolute",
      top: "50%",
      transform: "translate(-50%, -50%)",
      width: 0
    }
  },
  ({ style }) => {
    const pulse = keyframes({
      "0%": {
        height: 0,
        width: 0
      },
      "30%": {
        borderWidth: px(8),
        height: px(style.loaderSize),
        opacity: 1,
        width: px(style.loaderSize)
      },
      "100%": {
        borderWidth: 0,
        height: px(style.loaderSize),
        opacity: 0,
        width: px(style.loaderSize)
      }
    });
    return {
      height: px(style.loaderSize),
      width: px(style.loaderSize),
      "> div": {
        animation: `${pulse} 1.15s infinite cubic-bezier(0.215, 0.61, 0.355, 1)`,
        borderColor: style.loaderColor
      }
    };
  },
  "LoaderRSWP"
);
function Loader({ styles: { loaderColor, loaderSize } }) {
  return (0, import_jsx_runtime19.jsx)(Wrapper8, { "data-component-name": "Loader", style: { loaderColor, loaderSize }, children: (0, import_jsx_runtime19.jsx)("div", {}) });
}
put(".PlayerRSWP", {
  boxSizing: "border-box",
  fontSize: "inherit",
  width: "100%",
  "*": {
    boxSizing: "border-box"
  },
  button: {
    appearance: "none",
    backgroundColor: "transparent",
    border: 0,
    borderRadius: 0,
    color: "inherit",
    cursor: "pointer",
    display: "inline-flex",
    lineHeight: 1,
    padding: 0,
    ":focus": {
      outlineColor: "#000",
      outlineOffset: 3
    }
  },
  p: {
    margin: 0
  }
});
var Player = (0, import_react106.forwardRef)(
  ({ children, styles: { bgColor, height }, ...rest }, ref) => {
    return (0, import_jsx_runtime20.jsx)(
      "div",
      {
        ref,
        className: "PlayerRSWP",
        "data-component-name": "Player",
        style: { backgroundColor: bgColor, minHeight: px(height) },
        ...rest,
        children
      }
    );
  }
);
var Player_default = Player;
var Wrapper9 = styled("div")(
  {
    display: "flex",
    position: "relative",
    transition: "height 0.3s",
    zIndex: 10
  },
  ({ style }) => ({
    height: px(style.sliderHeight)
  }),
  "SliderRSWP"
);
function Slider(props) {
  const { isMagnified, onChangeRange, onToggleMagnify, position, styles } = props;
  const handleChangeRange = async ({ x }) => {
    onChangeRange(x);
  };
  const handleSize = styles.sliderHeight + 6;
  return (0, import_jsx_runtime21.jsx)(
    Wrapper9,
    {
      "data-component-name": "Slider",
      "data-position": position,
      onMouseEnter: onToggleMagnify,
      onMouseLeave: onToggleMagnify,
      style: { sliderHeight: isMagnified ? styles.sliderHeight + 4 : styles.sliderHeight },
      children: (0, import_jsx_runtime21.jsx)(
        esm_default,
        {
          axis: "x",
          className: "slider",
          onChange: handleChangeRange,
          styles: {
            options: {
              thumbBorder: 0,
              thumbBorderRadius: styles.sliderHandleBorderRadius,
              thumbColor: styles.sliderHandleColor,
              thumbSize: isMagnified ? handleSize + 4 : handleSize,
              height: isMagnified ? styles.sliderHeight + 4 : styles.sliderHeight,
              padding: 0,
              rangeColor: styles.sliderColor,
              trackBorderRadius: styles.sliderTrackBorderRadius,
              trackColor: styles.sliderTrackColor
            }
          },
          x: position,
          xMax: 100,
          xMin: 0,
          xStep: 0.1
        }
      )
    }
  );
}
var SpotifyWebPlayer = class extends import_react100.PureComponent {
  constructor(props) {
    super(props);
    __publicField(this, "isActive", false);
    __publicField(this, "emptyTrack", {
      artists: [],
      durationMs: 0,
      id: "",
      image: "",
      name: "",
      uri: ""
    });
    __publicField(this, "hasNewToken", false);
    __publicField(this, "player");
    __publicField(this, "playerProgressInterval");
    __publicField(this, "playerSyncInterval");
    __publicField(this, "ref", (0, import_react100.createRef)());
    __publicField(this, "seekUpdateInterval", 100);
    __publicField(this, "styles");
    __publicField(this, "syncTimeout");
    __publicField(this, "getPlayOptions", memoizeOne((data) => {
      const playOptions = {
        context_uri: void 0,
        uris: void 0
      };
      if (data) {
        const ids = Array.isArray(data) ? data : [data];
        if (!ids.every((d) => validateURI(d))) {
          console.error("Invalid URI");
          return playOptions;
        }
        if (ids.some((d) => getSpotifyURIType(d) === "track")) {
          if (!ids.every((d) => getSpotifyURIType(d) === "track")) {
            console.warn("You can't mix tracks URIs with other types");
          }
          playOptions.uris = ids.filter((d) => validateURI(d) && getSpotifyURIType(d) === "track");
        } else {
          if (ids.length > 1) {
            console.warn("Albums, Artists, Playlists and Podcasts can't have multiple URIs");
          }
          playOptions.context_uri = ids[0];
        }
      }
      return playOptions;
    }));
    __publicField(this, "handleChangeRange", async (position) => {
      const { track } = this.state;
      const { callback, token } = this.props;
      let progress = 0;
      try {
        const percentage = position / 100;
        if (this.isExternalPlayer) {
          progress = Math.round(track.durationMs * percentage);
          await seek(token, progress);
          this.updateState({
            position,
            progressMs: progress
          });
        } else if (this.player) {
          const state = await this.player.getCurrentState();
          if (state) {
            progress = Math.round(state.track_window.current_track.duration_ms * percentage);
            await this.player.seek(progress);
            this.updateState({
              position,
              progressMs: progress
            });
          } else {
            this.updateState({ position: 0 });
          }
        }
        if (callback) {
          callback({
            ...this.state,
            type: TYPE.PROGRESS
          });
        }
      } catch (error) {
        console.error(error);
      }
    });
    __publicField(this, "handleClickTogglePlay", async () => {
      const { isActive } = this.state;
      try {
        await this.togglePlay(!this.isExternalPlayer && !isActive);
      } catch (error) {
        console.error(error);
      }
    });
    __publicField(this, "handleClickPrevious", async () => {
      try {
        if (this.isExternalPlayer) {
          const { token } = this.props;
          await previous(token);
          this.syncTimeout = window.setTimeout(() => {
            this.syncDevice();
          }, 300);
        } else if (this.player) {
          await this.player.previousTrack();
        }
      } catch (error) {
        console.error(error);
      }
    });
    __publicField(this, "handleClickNext", async () => {
      try {
        if (this.isExternalPlayer) {
          const { token } = this.props;
          await next(token);
          this.syncTimeout = window.setTimeout(() => {
            this.syncDevice();
          }, 300);
        } else if (this.player) {
          await this.player.nextTrack();
        }
      } catch (error) {
        console.error(error);
      }
    });
    __publicField(this, "handleClickDevice", async (deviceId) => {
      const { isUnsupported } = this.state;
      const { autoPlay, persistDeviceSelection, token } = this.props;
      this.updateState({ currentDeviceId: deviceId });
      try {
        await setDevice(token, deviceId);
        if (persistDeviceSelection) {
          sessionStorage.setItem("rswpDeviceId", deviceId);
        }
        if (isUnsupported) {
          await this.syncDevice();
          const player = await getPlaybackState(token);
          if (player && !player.is_playing && autoPlay) {
            await this.togglePlay(true);
          }
        }
      } catch (error) {
        console.error(error);
      }
    });
    __publicField(this, "handleFavoriteStatusChange", (status) => {
      const { isSaved } = this.state;
      this.updateState({ isSaved: status });
      if (isSaved !== status) {
        this.handleCallback({
          ...this.state,
          isSaved: status,
          type: TYPE.FAVORITE
        });
      }
    });
    __publicField(this, "handlePlayerErrors", async (type, message) => {
      const { status } = this.state;
      const isPlaybackError = type === "playback_error";
      const isInitializationError = type === "initialization_error";
      let nextStatus = status;
      let devices = [];
      if (this.player && !isPlaybackError) {
        await this.player.disconnect();
        this.player = void 0;
      }
      if (isInitializationError) {
        const { token } = this.props;
        nextStatus = STATUS.UNSUPPORTED;
        ({ devices = [] } = await getDevices(token));
      }
      if (!isInitializationError && !isPlaybackError) {
        nextStatus = STATUS.ERROR;
      }
      this.updateState({
        devices,
        error: message,
        errorType: type,
        isInitializing: false,
        isUnsupported: isInitializationError,
        status: nextStatus
      });
    });
    __publicField(this, "handlePlayerStateChanges", async (state) => {
      var _a;
      try {
        if (state) {
          const {
            paused,
            position,
            track_window: {
              current_track: { album, artists, duration_ms, id, name, uri },
              next_tracks,
              previous_tracks
            }
          } = state;
          const isPlaying = !paused;
          const volume = await ((_a = this.player) == null ? void 0 : _a.getVolume()) || 100;
          const track = {
            artists,
            durationMs: duration_ms,
            id,
            image: this.setAlbumImage(album),
            name,
            uri
          };
          let trackState;
          if (position === 0) {
            trackState = {
              nextTracks: next_tracks,
              position: 0,
              previousTracks: previous_tracks,
              track
            };
          }
          this.updateState({
            error: "",
            errorType: "",
            isActive: true,
            isPlaying,
            progressMs: position,
            volume: round2(volume),
            ...trackState
          });
        } else if (this.isExternalPlayer) {
          await this.syncDevice();
        } else {
          this.updateState({
            isActive: false,
            isPlaying: false,
            nextTracks: [],
            position: 0,
            previousTracks: [],
            track: {
              artists: "",
              durationMs: 0,
              id: "",
              image: "",
              name: "",
              uri: ""
            }
          });
        }
      } catch (error) {
        console.error(error);
      }
    });
    __publicField(this, "handlePlayerStatus", async ({ device_id }) => {
      const { currentDeviceId, devices } = await this.initializeDevices(device_id);
      this.updateState({
        currentDeviceId,
        deviceId: device_id,
        devices,
        isInitializing: false,
        status: device_id ? STATUS.READY : STATUS.IDLE
      });
    });
    __publicField(this, "handleToggleMagnify", () => {
      const { magnifySliderOnHover } = this.props;
      if (magnifySliderOnHover) {
        this.updateState((previousState) => {
          return { isMagnified: !previousState.isMagnified };
        });
      }
    });
    __publicField(this, "initializePlayer", () => {
      const { volume } = this.state;
      const { name = "Spotify Web Player", token } = this.props;
      if (!window.Spotify) {
        return;
      }
      this.updateState({
        error: "",
        errorType: "",
        isInitializing: true
      });
      this.player = new window.Spotify.Player({
        getOAuthToken: (callback) => {
          callback(token);
        },
        name,
        volume
      });
      this.player.addListener("ready", this.handlePlayerStatus);
      this.player.addListener("not_ready", this.handlePlayerStatus);
      this.player.addListener("player_state_changed", this.handlePlayerStateChanges);
      this.player.addListener(
        "initialization_error",
        (error) => this.handlePlayerErrors("initialization_error", error.message)
      );
      this.player.addListener(
        "authentication_error",
        (error) => this.handlePlayerErrors("authentication_error", error.message)
      );
      this.player.addListener(
        "account_error",
        (error) => this.handlePlayerErrors("account_error", error.message)
      );
      this.player.addListener(
        "playback_error",
        (error) => this.handlePlayerErrors("playback_error", error.message)
      );
      this.player.connect();
    });
    __publicField(this, "setAlbumImage", (album) => {
      const width = Math.min(...album.images.map((d) => d.width || 0));
      const thumb = album.images.find((d) => d.width === width) || {};
      return thumb.url;
    });
    __publicField(this, "setExternalDevice", (id) => {
      this.updateState({ currentDeviceId: id, isPlaying: true });
    });
    __publicField(this, "setVolume", async (volume) => {
      const { token } = this.props;
      if (this.isExternalPlayer) {
        await setVolume(token, Math.round(volume * 100));
        await this.syncDevice();
      } else if (this.player) {
        await this.player.setVolume(volume);
      }
      this.updateState({ volume });
    });
    __publicField(this, "syncDevice", async () => {
      if (!this.isActive) {
        return;
      }
      const { deviceId } = this.state;
      const { token } = this.props;
      try {
        const player = await getPlaybackState(token);
        let track = this.emptyTrack;
        if (!player) {
          throw new Error("No player");
        }
        if (player.item) {
          track = {
            artists: player.item.artists,
            durationMs: player.item.duration_ms,
            id: player.item.id,
            image: this.setAlbumImage(player.item.album),
            name: player.item.name,
            uri: player.item.uri
          };
        }
        this.updateState({
          error: "",
          errorType: "",
          isActive: true,
          isPlaying: player.is_playing,
          nextTracks: [],
          previousTracks: [],
          progressMs: player.item ? player.progress_ms : 0,
          status: STATUS.READY,
          track,
          volume: parseVolume(player.device.volume_percent)
        });
      } catch (error) {
        const state = {
          isActive: false,
          isPlaying: false,
          position: 0,
          track: this.emptyTrack
        };
        if (deviceId) {
          this.updateState({
            currentDeviceId: deviceId,
            ...state
          });
          return;
        }
        this.updateState({
          error: error.message,
          errorType: "player_status",
          status: STATUS.ERROR,
          ...state
        });
      }
    });
    __publicField(this, "toggleOffset", async () => {
      const { currentDeviceId } = this.state;
      const { offset, token, uris } = this.props;
      if (typeof offset === "number" && Array.isArray(uris)) {
        await play(token, { deviceId: currentDeviceId, offset, uris });
      }
    });
    __publicField(this, "togglePlay", async (init = false) => {
      const { currentDeviceId, isPlaying, needsUpdate } = this.state;
      const { offset, token, uris } = this.props;
      const shouldInitialize = init || needsUpdate;
      const playOptions = this.getPlayOptions(uris);
      try {
        if (this.isExternalPlayer) {
          if (!isPlaying) {
            await play(token, {
              deviceId: currentDeviceId,
              offset,
              ...shouldInitialize ? playOptions : void 0
            });
          } else {
            await pause(token);
            this.updateState({ isPlaying: false });
          }
          this.syncTimeout = window.setTimeout(() => {
            this.syncDevice();
          }, 300);
        } else if (this.player) {
          const playerState = await this.player.getCurrentState();
          await this.player.activateElement();
          if (!playerState && !!(playOptions.context_uri || playOptions.uris) || shouldInitialize && playerState && playerState.paused) {
            await play(token, {
              deviceId: currentDeviceId,
              offset,
              ...shouldInitialize ? playOptions : void 0
            });
          } else {
            await this.player.togglePlay();
          }
        }
        if (needsUpdate) {
          this.updateState({ needsUpdate: false });
        }
      } catch (error) {
        console.error(error);
      }
    });
    __publicField(this, "updateSeekBar", async () => {
      if (!this.isActive) {
        return;
      }
      const { progressMs, track } = this.state;
      try {
        if (this.isExternalPlayer) {
          let position = progressMs / track.durationMs;
          position = Number(((Number.isFinite(position) ? position : 0) * 100).toFixed(1));
          this.updateState({
            position,
            progressMs: progressMs + this.seekUpdateInterval
          });
        } else if (this.player) {
          const state = await this.player.getCurrentState();
          if (state) {
            const progress = state.position;
            const position = Number(
              (progress / state.track_window.current_track.duration_ms * 100).toFixed(1)
            );
            this.updateState({
              position,
              progressMs: progress + this.seekUpdateInterval
            });
          }
        }
      } catch (error) {
        console.error(error);
      }
    });
    __publicField(this, "updateState", (state = {}) => {
      if (!this.isActive) {
        return;
      }
      this.setState(state);
    });
    this.state = {
      currentDeviceId: "",
      deviceId: "",
      devices: [],
      error: "",
      errorType: "",
      isActive: false,
      isInitializing: false,
      isMagnified: false,
      isPlaying: false,
      isSaved: false,
      isUnsupported: false,
      needsUpdate: false,
      nextTracks: [],
      playerPosition: "bottom",
      position: 0,
      previousTracks: [],
      progressMs: 0,
      status: STATUS.IDLE,
      track: this.emptyTrack,
      volume: parseVolume(props.initialVolume) || 1
    };
    this.styles = getMergedStyles(props.styles);
  }
  async componentDidMount() {
    var _a;
    this.isActive = true;
    const { top = 0 } = ((_a = this.ref.current) == null ? void 0 : _a.getBoundingClientRect()) || {};
    this.updateState({
      playerPosition: top > window.innerHeight / 2 ? "bottom" : "top",
      status: STATUS.INITIALIZING
    });
    if (!window.onSpotifyWebPlaybackSDKReady) {
      window.onSpotifyWebPlaybackSDKReady = this.initializePlayer;
    } else {
      this.initializePlayer();
    }
    await loadSpotifyPlayer();
  }
  async componentDidUpdate(previousProps, previousState) {
    const { currentDeviceId, deviceId, errorType, isInitializing, isPlaying, status, track } = this.state;
    const {
      autoPlay,
      offset,
      play: playProp,
      showSaveIcon,
      syncExternalDevice,
      token,
      uris
    } = this.props;
    const isReady = previousState.status !== STATUS.READY && status === STATUS.READY;
    const changedURIs = !equal(previousProps.uris, uris);
    const playOptions = this.getPlayOptions(uris);
    const canPlay = !!currentDeviceId && !!(playOptions.context_uri || playOptions.uris);
    const shouldPlay = changedURIs && isPlaying || !!(isReady && (autoPlay || playProp));
    if (canPlay && shouldPlay) {
      await play(token, { deviceId: currentDeviceId, offset, ...playOptions });
      if (!isPlaying) {
        this.updateState({ isPlaying: true });
      }
      if (this.isExternalPlayer) {
        this.syncTimeout = window.setTimeout(() => {
          this.syncDevice();
        }, 600);
      }
    } else if (changedURIs && !isPlaying) {
      this.updateState({ needsUpdate: true });
    }
    if (previousState.status !== status) {
      this.handleCallback({
        ...this.state,
        type: TYPE.STATUS
      });
    }
    if (previousState.currentDeviceId !== currentDeviceId && currentDeviceId) {
      if (!isReady) {
        this.handleCallback({
          ...this.state,
          type: TYPE.DEVICE
        });
      }
      await this.toggleSyncInterval(this.isExternalPlayer);
      await this.updateSeekBar();
    }
    if (previousState.track.id !== track.id && track.id) {
      this.handleCallback({
        ...this.state,
        type: TYPE.TRACK
      });
      if (showSaveIcon) {
        this.updateState({ isSaved: false });
      }
    }
    if (previousState.isPlaying !== isPlaying) {
      this.toggleProgressBar();
      await this.toggleSyncInterval(this.isExternalPlayer);
      this.handleCallback({
        ...this.state,
        type: TYPE.PLAYER
      });
    }
    if (token && previousProps.token !== token) {
      if (!isInitializing) {
        this.initializePlayer();
      } else {
        this.hasNewToken = true;
      }
    }
    if (previousProps.play !== playProp && playProp !== isPlaying) {
      await this.togglePlay(!track.id || changedURIs);
    }
    if (previousProps.offset !== offset) {
      await this.toggleOffset();
    }
    if (previousState.isInitializing && !isInitializing) {
      if (syncExternalDevice && !uris) {
        const player = await getPlaybackState(token);
        if (player && player.is_playing && player.device.id !== deviceId) {
          this.setExternalDevice(player.device.id);
        }
      }
    }
    if (errorType === "authentication_error" && this.hasNewToken) {
      this.hasNewToken = false;
      this.initializePlayer();
    }
  }
  async componentWillUnmount() {
    this.isActive = false;
    if (this.player) {
      this.player.disconnect();
    }
    clearInterval(this.playerSyncInterval);
    clearInterval(this.playerProgressInterval);
    clearTimeout(this.syncTimeout);
  }
  get isExternalPlayer() {
    const { currentDeviceId, deviceId, status } = this.state;
    return currentDeviceId && currentDeviceId !== deviceId || status === STATUS.UNSUPPORTED;
  }
  handleCallback(state) {
    const { callback } = this.props;
    if (callback) {
      callback(state);
    }
  }
  async initializeDevices(id) {
    const { persistDeviceSelection, token } = this.props;
    const { devices } = await getDevices(token);
    let currentDeviceId = id;
    if (persistDeviceSelection) {
      const savedDeviceId = sessionStorage.getItem("rswpDeviceId");
      if (!savedDeviceId || !devices.some((d) => d.id === savedDeviceId)) {
        sessionStorage.setItem("rswpDeviceId", currentDeviceId);
      } else {
        currentDeviceId = savedDeviceId;
      }
    }
    return { currentDeviceId, devices };
  }
  async toggleSyncInterval(shouldSync) {
    const { syncExternalDeviceInterval } = this.props;
    try {
      if (this.isExternalPlayer && shouldSync && !this.playerSyncInterval) {
        await this.syncDevice();
        clearInterval(this.playerSyncInterval);
        this.playerSyncInterval = window.setInterval(
          this.syncDevice,
          syncExternalDeviceInterval * 1e3
        );
      }
      if ((!shouldSync || !this.isExternalPlayer) && this.playerSyncInterval) {
        clearInterval(this.playerSyncInterval);
        this.playerSyncInterval = void 0;
      }
    } catch (error) {
      console.error(error);
    }
  }
  toggleProgressBar() {
    const { isPlaying } = this.state;
    if (isPlaying) {
      if (!this.playerProgressInterval) {
        this.playerProgressInterval = window.setInterval(
          this.updateSeekBar,
          this.seekUpdateInterval
        );
      }
    } else if (this.playerProgressInterval) {
      clearInterval(this.playerProgressInterval);
      this.playerProgressInterval = void 0;
    }
  }
  render() {
    const {
      currentDeviceId,
      deviceId,
      devices,
      error,
      errorType,
      isActive,
      isMagnified,
      isPlaying,
      isUnsupported,
      nextTracks,
      playerPosition,
      position,
      previousTracks,
      status,
      track,
      volume
    } = this.state;
    const { locale, name, showSaveIcon, token, updateSavedStatus } = this.props;
    const isReady = [STATUS.READY, STATUS.UNSUPPORTED].indexOf(status) >= 0;
    const isPlaybackError = errorType === "playback_error";
    const localeMerged = getLocale(locale);
    let output = (0, import_jsx_runtime22.jsx)(Loader, { styles: this.styles });
    let info;
    if (isPlaybackError) {
      info = (0, import_jsx_runtime22.jsx)("p", { children: error });
    }
    if (isReady) {
      if (!info) {
        info = (0, import_jsx_runtime22.jsx)(
          Info,
          {
            isActive,
            locale: localeMerged,
            onFavoriteStatusChange: this.handleFavoriteStatusChange,
            showSaveIcon,
            styles: this.styles,
            token,
            track,
            updateSavedStatus
          }
        );
      }
      output = (0, import_jsx_runtime22.jsxs)(import_jsx_runtime22.Fragment, { children: [
        info,
        (0, import_jsx_runtime22.jsx)(
          Controls,
          {
            isExternalDevice: this.isExternalPlayer,
            isPlaying,
            locale: localeMerged,
            nextTracks,
            onClickNext: this.handleClickNext,
            onClickPrevious: this.handleClickPrevious,
            onClickTogglePlay: this.handleClickTogglePlay,
            previousTracks,
            styles: this.styles
          }
        ),
        (0, import_jsx_runtime22.jsx)(
          Actions,
          {
            currentDeviceId,
            deviceId,
            devices,
            isDevicesOpen: isUnsupported && !deviceId,
            locale: localeMerged,
            onClickDevice: this.handleClickDevice,
            playerPosition,
            setVolume: this.setVolume,
            styles: this.styles,
            volume
          }
        )
      ] });
    } else if (info) {
      output = info;
    }
    if (status === STATUS.ERROR) {
      output = (0, import_jsx_runtime22.jsxs)(ErrorMessage, { styles: this.styles, children: [
        name,
        ": ",
        error
      ] });
    }
    return (0, import_jsx_runtime22.jsxs)(Player_default, { ref: this.ref, "data-ready": isReady, styles: this.styles, children: [
      isReady && (0, import_jsx_runtime22.jsx)(
        Slider,
        {
          isMagnified,
          onChangeRange: this.handleChangeRange,
          onToggleMagnify: this.handleToggleMagnify,
          position,
          styles: this.styles
        }
      ),
      (0, import_jsx_runtime22.jsx)(Content, { styles: this.styles, children: output })
    ] });
  }
};
__publicField(SpotifyWebPlayer, "defaultProps", {
  autoPlay: false,
  initialVolume: 1,
  magnifySliderOnHover: false,
  name: "Spotify Web Player",
  persistDeviceSelection: false,
  showSaveIcon: false,
  syncExternalDeviceInterval: 5,
  syncExternalDevice: false
});
var src_default = SpotifyWebPlayer;
export {
  STATUS,
  TYPE,
  src_default as default
};
/*! Bundled license information:

js-cookie/src/js.cookie.js:
  (*!
   * JavaScript Cookie v2.2.1
   * https://github.com/js-cookie/js-cookie
   *
   * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
   * Released under the MIT license
   *)

screenfull/dist/screenfull.js:
  (*!
  * screenfull
  * v5.2.0 - 2021-11-03
  * (c) Sindre Sorhus; MIT License
  *)

exenv/index.js:
  (*!
    Copyright (c) 2015 Jed Watson.
    Based on code that is Copyright 2013-2015, Facebook, Inc.
    All rights reserved.
  *)
*/
//# sourceMappingURL=react-spotify-web-playback.js.map
